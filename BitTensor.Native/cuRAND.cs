// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace BitTensor.Native
{
    public static unsafe partial class cuRAND
    {
        const string __DllName = "curand64_10.dll";



        [DllImport(__DllName, EntryPoint = "curandCreateGenerator", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandCreateGenerator(curandGenerator_st** generator, curandRngType rng_type);

        [DllImport(__DllName, EntryPoint = "curandCreateGeneratorHost", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandCreateGeneratorHost(curandGenerator_st** generator, curandRngType rng_type);

        [DllImport(__DllName, EntryPoint = "curandDestroyGenerator", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandDestroyGenerator(curandGenerator_st* generator);

        [DllImport(__DllName, EntryPoint = "curandGetVersion", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandGetVersion(int* version);

        [DllImport(__DllName, EntryPoint = "curandGetProperty", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandGetProperty(libraryPropertyType_t type_, int* value);

        [DllImport(__DllName, EntryPoint = "curandSetStream", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandSetStream(curandGenerator_st* generator, CUstream_st* stream);

        [DllImport(__DllName, EntryPoint = "curandSetPseudoRandomGeneratorSeed", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandSetPseudoRandomGeneratorSeed(curandGenerator_st* generator, ulong seed);

        [DllImport(__DllName, EntryPoint = "curandSetGeneratorOffset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandSetGeneratorOffset(curandGenerator_st* generator, ulong offset);

        [DllImport(__DllName, EntryPoint = "curandSetGeneratorOrdering", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandSetGeneratorOrdering(curandGenerator_st* generator, curandOrdering order);

        [DllImport(__DllName, EntryPoint = "curandSetQuasiRandomGeneratorDimensions", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandSetQuasiRandomGeneratorDimensions(curandGenerator_st* generator, uint num_dimensions);

        [DllImport(__DllName, EntryPoint = "curandGenerate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandGenerate(curandGenerator_st* generator, uint* outputPtr, nuint num);

        [DllImport(__DllName, EntryPoint = "curandGenerateLongLong", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandGenerateLongLong(curandGenerator_st* generator, ulong* outputPtr, nuint num);

        [DllImport(__DllName, EntryPoint = "curandGenerateUniform", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandGenerateUniform(curandGenerator_st* generator, float* outputPtr, nuint num);

        [DllImport(__DllName, EntryPoint = "curandGenerateUniformDouble", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandGenerateUniformDouble(curandGenerator_st* generator, double* outputPtr, nuint num);

        [DllImport(__DllName, EntryPoint = "curandGenerateNormal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandGenerateNormal(curandGenerator_st* generator, float* outputPtr, nuint n, float mean, float stddev);

        [DllImport(__DllName, EntryPoint = "curandGenerateNormalDouble", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandGenerateNormalDouble(curandGenerator_st* generator, double* outputPtr, nuint n, double mean, double stddev);

        [DllImport(__DllName, EntryPoint = "curandGenerateLogNormal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandGenerateLogNormal(curandGenerator_st* generator, float* outputPtr, nuint n, float mean, float stddev);

        [DllImport(__DllName, EntryPoint = "curandGenerateLogNormalDouble", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandGenerateLogNormalDouble(curandGenerator_st* generator, double* outputPtr, nuint n, double mean, double stddev);

        [DllImport(__DllName, EntryPoint = "curandCreatePoissonDistribution", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandCreatePoissonDistribution(double lambda, curandDiscreteDistribution_st** discrete_distribution);

        [DllImport(__DllName, EntryPoint = "curandDestroyDistribution", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandDestroyDistribution(curandDiscreteDistribution_st* discrete_distribution);

        [DllImport(__DllName, EntryPoint = "curandGeneratePoisson", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandGeneratePoisson(curandGenerator_st* generator, uint* outputPtr, nuint n, double lambda);

        [DllImport(__DllName, EntryPoint = "curandGeneratePoissonMethod", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandGeneratePoissonMethod(curandGenerator_st* generator, uint* outputPtr, nuint n, double lambda, curandMethod method);

        [DllImport(__DllName, EntryPoint = "curandGenerateBinomial", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandGenerateBinomial(curandGenerator_st* generator, uint* outputPtr, nuint num, uint n, double p);

        [DllImport(__DllName, EntryPoint = "curandGenerateBinomialMethod", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandGenerateBinomialMethod(curandGenerator_st* generator, uint* outputPtr, nuint num, uint n, double p, curandMethod method);

        [DllImport(__DllName, EntryPoint = "curandGenerateSeeds", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandGenerateSeeds(curandGenerator_st* generator);

        [DllImport(__DllName, EntryPoint = "curandGetDirectionVectors32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandGetDirectionVectors32(void/* uint[] */** vectors, curandDirectionVectorSet set);

        [DllImport(__DllName, EntryPoint = "curandGetScrambleConstants32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandGetScrambleConstants32(uint** constants);

        [DllImport(__DllName, EntryPoint = "curandGetDirectionVectors64", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandGetDirectionVectors64(void/* ulong[] */** vectors, curandDirectionVectorSet set);

        [DllImport(__DllName, EntryPoint = "curandGetScrambleConstants64", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern curandStatus curandGetScrambleConstants64(ulong** constants);


    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct curandGenerator_st
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct curandDiscreteDistribution_st
    {
        public fixed byte _unused[1];
    }

    public enum curandStatus : int
    {
        CURAND_STATUS_SUCCESS = 0,
        CURAND_STATUS_VERSION_MISMATCH = 100,
        CURAND_STATUS_NOT_INITIALIZED = 101,
        CURAND_STATUS_ALLOCATION_FAILED = 102,
        CURAND_STATUS_TYPE_ERROR = 103,
        CURAND_STATUS_OUT_OF_RANGE = 104,
        CURAND_STATUS_LENGTH_NOT_MULTIPLE = 105,
        CURAND_STATUS_DOUBLE_PRECISION_REQUIRED = 106,
        CURAND_STATUS_LAUNCH_FAILURE = 201,
        CURAND_STATUS_PREEXISTING_FAILURE = 202,
        CURAND_STATUS_INITIALIZATION_FAILED = 203,
        CURAND_STATUS_ARCH_MISMATCH = 204,
        CURAND_STATUS_INTERNAL_ERROR = 999,
    }

    public enum curandRngType : int
    {
        CURAND_RNG_TEST = 0,
        CURAND_RNG_PSEUDO_DEFAULT = 100,
        CURAND_RNG_PSEUDO_XORWOW = 101,
        CURAND_RNG_PSEUDO_MRG32K3A = 121,
        CURAND_RNG_PSEUDO_MTGP32 = 141,
        CURAND_RNG_PSEUDO_MT19937 = 142,
        CURAND_RNG_PSEUDO_PHILOX4_32_10 = 161,
        CURAND_RNG_QUASI_DEFAULT = 200,
        CURAND_RNG_QUASI_SOBOL32 = 201,
        CURAND_RNG_QUASI_SCRAMBLED_SOBOL32 = 202,
        CURAND_RNG_QUASI_SOBOL64 = 203,
        CURAND_RNG_QUASI_SCRAMBLED_SOBOL64 = 204,
    }

    public enum curandOrdering : int
    {
        CURAND_ORDERING_PSEUDO_BEST = 100,
        CURAND_ORDERING_PSEUDO_DEFAULT = 101,
        CURAND_ORDERING_PSEUDO_SEEDED = 102,
        CURAND_ORDERING_PSEUDO_LEGACY = 103,
        CURAND_ORDERING_PSEUDO_DYNAMIC = 104,
        CURAND_ORDERING_QUASI_DEFAULT = 201,
    }

    public enum curandDirectionVectorSet : int
    {
        CURAND_DIRECTION_VECTORS_32_JOEKUO6 = 101,
        CURAND_SCRAMBLED_DIRECTION_VECTORS_32_JOEKUO6 = 102,
        CURAND_DIRECTION_VECTORS_64_JOEKUO6 = 103,
        CURAND_SCRAMBLED_DIRECTION_VECTORS_64_JOEKUO6 = 104,
    }

    public enum curandMethod : int
    {
        CURAND_CHOOSE_BEST = 0,
        CURAND_ITR = 1,
        CURAND_KNUTH = 2,
        CURAND_HITR = 3,
        CURAND_M1 = 4,
        CURAND_M2 = 5,
        CURAND_BINARY_SEARCH = 6,
        CURAND_DISCRETE_GAUSS = 7,
        CURAND_REJECTION = 8,
        CURAND_DEVICE_API = 9,
        CURAND_FAST_REJECTION = 10,
        CURAND_3RD = 11,
        CURAND_DEFINITION = 12,
        CURAND_POISSON = 13,
    }


}
    