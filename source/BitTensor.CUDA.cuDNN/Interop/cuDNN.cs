// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace BitTensor.CUDA.Interop;

public static unsafe partial class cuDNN
{
    const string __DllName = "cudnn64_9.dll";



    [DllImport(__DllName, EntryPoint = "cudnnGetVersion", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern nuint cudnnGetVersion();

    [DllImport(__DllName, EntryPoint = "cudnnGetMaxDeviceVersion", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern nuint cudnnGetMaxDeviceVersion();

    [DllImport(__DllName, EntryPoint = "cudnnGetCudartVersion", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern nuint cudnnGetCudartVersion();

    [DllImport(__DllName, EntryPoint = "cudnnGetErrorString", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern byte* cudnnGetErrorString(cudnnStatus_t status);

    [DllImport(__DllName, EntryPoint = "cudnnGetLastErrorString", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern void cudnnGetLastErrorString(byte* message, nuint max_size);

    [DllImport(__DllName, EntryPoint = "cudnnQueryRuntimeError", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnQueryRuntimeError(cudnnContext* handle, cudnnStatus_t* rstatus, cudnnErrQueryMode_t mode, cudnnRuntimeTag_t* tag);

    [DllImport(__DllName, EntryPoint = "cudnnGetProperty", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetProperty(libraryPropertyType_t type_, int* value);

    [DllImport(__DllName, EntryPoint = "cudnnCreate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreate(cudnnContext** handle);

    [DllImport(__DllName, EntryPoint = "cudnnDestroy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroy(cudnnContext* handle);

    [DllImport(__DllName, EntryPoint = "cudnnSetStream", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetStream(cudnnContext* handle, CUstream_st* streamId);

    [DllImport(__DllName, EntryPoint = "cudnnGetStream", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetStream(cudnnContext* handle, CUstream_st** streamId);

    [DllImport(__DllName, EntryPoint = "cudnnSetCallback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetCallback(uint mask, void* udata, delegate* unmanaged[Cdecl]<cudnnSeverity_t, void*, cudnnDebugStruct*, byte*, void> fptr);

    [DllImport(__DllName, EntryPoint = "cudnnGetCallback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetCallback(uint* mask, void** udata, delegate* unmanaged[Cdecl]<cudnnSeverity_t, void*, cudnnDebugStruct*, byte*, void>* fptr);

    [DllImport(__DllName, EntryPoint = "cudnnGraphVersionCheck", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGraphVersionCheck();

    [DllImport(__DllName, EntryPoint = "cudnnBackendCreateDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnBackendCreateDescriptor(cudnnBackendDescriptorType_t descriptorType, cudnnBackendDescriptor_t** descriptor);

    [DllImport(__DllName, EntryPoint = "cudnnBackendDestroyDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnBackendDestroyDescriptor(void* descriptor);

    [DllImport(__DllName, EntryPoint = "cudnnBackendInitialize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnBackendInitialize(void* descriptor);

    [DllImport(__DllName, EntryPoint = "cudnnBackendFinalize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnBackendFinalize(void* descriptor);

    [DllImport(__DllName, EntryPoint = "cudnnBackendSetAttribute", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnBackendSetAttribute(void* descriptor, cudnnBackendAttributeName_t attributeName, cudnnBackendAttributeType_t attributeType, long elementCount, void* arrayOfElements);

    [DllImport(__DllName, EntryPoint = "cudnnBackendGetAttribute", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnBackendGetAttribute(void* descriptor, cudnnBackendAttributeName_t attributeName, cudnnBackendAttributeType_t attributeType, long requestedElementCount, long* elementCount, void* arrayOfElements);

    [DllImport(__DllName, EntryPoint = "cudnnBackendExecute", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnBackendExecute(cudnnContext* handle, void* executionPlan, void* variantPack);

    [DllImport(__DllName, EntryPoint = "cudnnCreateTensorDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreateTensorDescriptor(cudnnTensorStruct** tensorDesc);

    [DllImport(__DllName, EntryPoint = "cudnnSetTensor4dDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetTensor4dDescriptor(cudnnTensorStruct* tensorDesc, cudnnTensorFormat_t format, cudnnDataType_t dataType, int n, int c, int h, int w);

    [DllImport(__DllName, EntryPoint = "cudnnSetTensor4dDescriptorEx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetTensor4dDescriptorEx(cudnnTensorStruct* tensorDesc, cudnnDataType_t dataType, int n, int c, int h, int w, int nStride, int cStride, int hStride, int wStride);

    [DllImport(__DllName, EntryPoint = "cudnnGetTensor4dDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetTensor4dDescriptor(cudnnTensorStruct* tensorDesc, cudnnDataType_t* dataType, int* n, int* c, int* h, int* w, int* nStride, int* cStride, int* hStride, int* wStride);

    [DllImport(__DllName, EntryPoint = "cudnnSetTensorNdDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetTensorNdDescriptor(cudnnTensorStruct* tensorDesc, cudnnDataType_t dataType, int nbDims, int* dimA, int* strideA);

    [DllImport(__DllName, EntryPoint = "cudnnSetTensorNdDescriptorEx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetTensorNdDescriptorEx(cudnnTensorStruct* tensorDesc, cudnnTensorFormat_t format, cudnnDataType_t dataType, int nbDims, int* dimA);

    [DllImport(__DllName, EntryPoint = "cudnnGetTensorNdDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetTensorNdDescriptor(cudnnTensorStruct* tensorDesc, int nbDimsRequested, cudnnDataType_t* dataType, int* nbDims, int* dimA, int* strideA);

    [DllImport(__DllName, EntryPoint = "cudnnGetTensorSizeInBytes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetTensorSizeInBytes(cudnnTensorStruct* tensorDesc, nuint* size);

    [DllImport(__DllName, EntryPoint = "cudnnDestroyTensorDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroyTensorDescriptor(cudnnTensorStruct* tensorDesc);

    [DllImport(__DllName, EntryPoint = "cudnnInitTransformDest", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnInitTransformDest(cudnnTensorTransformStruct* transformDesc, cudnnTensorStruct* srcDesc, cudnnTensorStruct* destDesc, nuint* destSizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnCreateTensorTransformDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreateTensorTransformDescriptor(cudnnTensorTransformStruct** transformDesc);

    [DllImport(__DllName, EntryPoint = "cudnnSetTensorTransformDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetTensorTransformDescriptor(cudnnTensorTransformStruct* transformDesc, uint nbDims, cudnnTensorFormat_t destFormat, int* padBeforeA, int* padAfterA, uint* foldA, cudnnFoldingDirection_t direction);

    [DllImport(__DllName, EntryPoint = "cudnnGetTensorTransformDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetTensorTransformDescriptor(cudnnTensorTransformStruct* transformDesc, uint nbDimsRequested, cudnnTensorFormat_t* destFormat, int* padBeforeA, int* padAfterA, uint* foldA, cudnnFoldingDirection_t* direction);

    [DllImport(__DllName, EntryPoint = "cudnnDestroyTensorTransformDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroyTensorTransformDescriptor(cudnnTensorTransformStruct* transformDesc);

    [DllImport(__DllName, EntryPoint = "cudnnTransformTensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnTransformTensor(cudnnContext* handle, void* alpha, cudnnTensorStruct* xDesc, void* x, void* beta, cudnnTensorStruct* yDesc, void* y);

    [DllImport(__DllName, EntryPoint = "cudnnTransformTensorEx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnTransformTensorEx(cudnnContext* handle, cudnnTensorTransformStruct* transDesc, void* alpha, cudnnTensorStruct* srcDesc, void* srcData, void* beta, cudnnTensorStruct* destDesc, void* destData);

    [DllImport(__DllName, EntryPoint = "cudnnAddTensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnAddTensor(cudnnContext* handle, void* alpha, cudnnTensorStruct* aDesc, void* A, void* beta, cudnnTensorStruct* cDesc, void* C);

    [DllImport(__DllName, EntryPoint = "cudnnCreateOpTensorDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreateOpTensorDescriptor(cudnnOpTensorStruct** opTensorDesc);

    [DllImport(__DllName, EntryPoint = "cudnnSetOpTensorDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetOpTensorDescriptor(cudnnOpTensorStruct* opTensorDesc, cudnnOpTensorOp_t opTensorOp, cudnnDataType_t opTensorCompType, cudnnNanPropagation_t opTensorNanOpt);

    [DllImport(__DllName, EntryPoint = "cudnnGetOpTensorDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetOpTensorDescriptor(cudnnOpTensorStruct* opTensorDesc, cudnnOpTensorOp_t* opTensorOp, cudnnDataType_t* opTensorCompType, cudnnNanPropagation_t* opTensorNanOpt);

    [DllImport(__DllName, EntryPoint = "cudnnDestroyOpTensorDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroyOpTensorDescriptor(cudnnOpTensorStruct* opTensorDesc);

    [DllImport(__DllName, EntryPoint = "cudnnOpTensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnOpTensor(cudnnContext* handle, cudnnOpTensorStruct* opTensorDesc, void* alpha1, cudnnTensorStruct* aDesc, void* A, void* alpha2, cudnnTensorStruct* bDesc, void* B, void* beta, cudnnTensorStruct* cDesc, void* C);

    [DllImport(__DllName, EntryPoint = "cudnnCreateReduceTensorDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreateReduceTensorDescriptor(cudnnReduceTensorStruct** reduceTensorDesc);

    [DllImport(__DllName, EntryPoint = "cudnnSetReduceTensorDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetReduceTensorDescriptor(cudnnReduceTensorStruct* reduceTensorDesc, cudnnReduceTensorOp_t reduceTensorOp, cudnnDataType_t reduceTensorCompType, cudnnNanPropagation_t reduceTensorNanOpt, cudnnReduceTensorIndices_t reduceTensorIndices, cudnnIndicesType_t reduceTensorIndicesType);

    [DllImport(__DllName, EntryPoint = "cudnnGetReduceTensorDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetReduceTensorDescriptor(cudnnReduceTensorStruct* reduceTensorDesc, cudnnReduceTensorOp_t* reduceTensorOp, cudnnDataType_t* reduceTensorCompType, cudnnNanPropagation_t* reduceTensorNanOpt, cudnnReduceTensorIndices_t* reduceTensorIndices, cudnnIndicesType_t* reduceTensorIndicesType);

    [DllImport(__DllName, EntryPoint = "cudnnDestroyReduceTensorDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroyReduceTensorDescriptor(cudnnReduceTensorStruct* reduceTensorDesc);

    [DllImport(__DllName, EntryPoint = "cudnnGetReductionIndicesSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetReductionIndicesSize(cudnnContext* handle, cudnnReduceTensorStruct* reduceTensorDesc, cudnnTensorStruct* aDesc, cudnnTensorStruct* cDesc, nuint* sizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnGetReductionWorkspaceSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetReductionWorkspaceSize(cudnnContext* handle, cudnnReduceTensorStruct* reduceTensorDesc, cudnnTensorStruct* aDesc, cudnnTensorStruct* cDesc, nuint* sizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnReduceTensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnReduceTensor(cudnnContext* handle, cudnnReduceTensorStruct* reduceTensorDesc, void* indices, nuint indicesSizeInBytes, void* workspace, nuint workspaceSizeInBytes, void* alpha, cudnnTensorStruct* aDesc, void* A, void* beta, cudnnTensorStruct* cDesc, void* C);

    [DllImport(__DllName, EntryPoint = "cudnnSetTensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetTensor(cudnnContext* handle, cudnnTensorStruct* yDesc, void* y, void* valuePtr);

    [DllImport(__DllName, EntryPoint = "cudnnScaleTensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnScaleTensor(cudnnContext* handle, cudnnTensorStruct* yDesc, void* y, void* alpha);

    [DllImport(__DllName, EntryPoint = "cudnnCreateFilterDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreateFilterDescriptor(cudnnFilterStruct** filterDesc);

    [DllImport(__DllName, EntryPoint = "cudnnSetFilter4dDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetFilter4dDescriptor(cudnnFilterStruct* filterDesc, cudnnDataType_t dataType, cudnnTensorFormat_t format, int k, int c, int h, int w);

    [DllImport(__DllName, EntryPoint = "cudnnGetFilter4dDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetFilter4dDescriptor(cudnnFilterStruct* filterDesc, cudnnDataType_t* dataType, cudnnTensorFormat_t* format, int* k, int* c, int* h, int* w);

    [DllImport(__DllName, EntryPoint = "cudnnSetFilterNdDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetFilterNdDescriptor(cudnnFilterStruct* filterDesc, cudnnDataType_t dataType, cudnnTensorFormat_t format, int nbDims, int* filterDimA);

    [DllImport(__DllName, EntryPoint = "cudnnGetFilterNdDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetFilterNdDescriptor(cudnnFilterStruct* filterDesc, int nbDimsRequested, cudnnDataType_t* dataType, cudnnTensorFormat_t* format, int* nbDims, int* filterDimA);

    [DllImport(__DllName, EntryPoint = "cudnnGetFilterSizeInBytes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetFilterSizeInBytes(cudnnFilterStruct* filterDesc, nuint* size);

    [DllImport(__DllName, EntryPoint = "cudnnTransformFilter", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnTransformFilter(cudnnContext* handle, cudnnTensorTransformStruct* transDesc, void* alpha, cudnnFilterStruct* srcDesc, void* srcData, void* beta, cudnnFilterStruct* destDesc, void* destData);

    [DllImport(__DllName, EntryPoint = "cudnnDestroyFilterDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroyFilterDescriptor(cudnnFilterStruct* filterDesc);

    [DllImport(__DllName, EntryPoint = "cudnnSoftmaxForward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSoftmaxForward(cudnnContext* handle, cudnnSoftmaxAlgorithm_t algo, cudnnSoftmaxMode_t mode, void* alpha, cudnnTensorStruct* xDesc, void* x, void* beta, cudnnTensorStruct* yDesc, void* y);

    [DllImport(__DllName, EntryPoint = "cudnnCreatePoolingDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreatePoolingDescriptor(cudnnPoolingStruct** poolingDesc);

    [DllImport(__DllName, EntryPoint = "cudnnSetPooling2dDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetPooling2dDescriptor(cudnnPoolingStruct* poolingDesc, cudnnPoolingMode_t mode, cudnnNanPropagation_t maxpoolingNanOpt, int windowHeight, int windowWidth, int verticalPadding, int horizontalPadding, int verticalStride, int horizontalStride);

    [DllImport(__DllName, EntryPoint = "cudnnGetPooling2dDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetPooling2dDescriptor(cudnnPoolingStruct* poolingDesc, cudnnPoolingMode_t* mode, cudnnNanPropagation_t* maxpoolingNanOpt, int* windowHeight, int* windowWidth, int* verticalPadding, int* horizontalPadding, int* verticalStride, int* horizontalStride);

    [DllImport(__DllName, EntryPoint = "cudnnSetPoolingNdDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetPoolingNdDescriptor(cudnnPoolingStruct* poolingDesc, cudnnPoolingMode_t mode, cudnnNanPropagation_t maxpoolingNanOpt, int nbDims, int* windowDimA, int* paddingA, int* strideA);

    [DllImport(__DllName, EntryPoint = "cudnnGetPoolingNdDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetPoolingNdDescriptor(cudnnPoolingStruct* poolingDesc, int nbDimsRequested, cudnnPoolingMode_t* mode, cudnnNanPropagation_t* maxpoolingNanOpt, int* nbDims, int* windowDimA, int* paddingA, int* strideA);

    [DllImport(__DllName, EntryPoint = "cudnnGetPoolingNdForwardOutputDim", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetPoolingNdForwardOutputDim(cudnnPoolingStruct* poolingDesc, cudnnTensorStruct* inputTensorDesc, int nbDims, int* outputTensorDimA);

    [DllImport(__DllName, EntryPoint = "cudnnGetPooling2dForwardOutputDim", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetPooling2dForwardOutputDim(cudnnPoolingStruct* poolingDesc, cudnnTensorStruct* inputTensorDesc, int* n, int* c, int* h, int* w);

    [DllImport(__DllName, EntryPoint = "cudnnDestroyPoolingDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroyPoolingDescriptor(cudnnPoolingStruct* poolingDesc);

    [DllImport(__DllName, EntryPoint = "cudnnPoolingForward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnPoolingForward(cudnnContext* handle, cudnnPoolingStruct* poolingDesc, void* alpha, cudnnTensorStruct* xDesc, void* x, void* beta, cudnnTensorStruct* yDesc, void* y);

    [DllImport(__DllName, EntryPoint = "cudnnCreateActivationDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreateActivationDescriptor(cudnnActivationStruct** activationDesc);

    [DllImport(__DllName, EntryPoint = "cudnnSetActivationDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetActivationDescriptor(cudnnActivationStruct* activationDesc, cudnnActivationMode_t mode, cudnnNanPropagation_t reluNanOpt, double coef);

    [DllImport(__DllName, EntryPoint = "cudnnGetActivationDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetActivationDescriptor(cudnnActivationStruct* activationDesc, cudnnActivationMode_t* mode, cudnnNanPropagation_t* reluNanOpt, double* coef);

    [DllImport(__DllName, EntryPoint = "cudnnSetActivationDescriptorSwishBeta", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetActivationDescriptorSwishBeta(cudnnActivationStruct* activationDesc, double swish_beta);

    [DllImport(__DllName, EntryPoint = "cudnnGetActivationDescriptorSwishBeta", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetActivationDescriptorSwishBeta(cudnnActivationStruct* activationDesc, double* swish_beta);

    [DllImport(__DllName, EntryPoint = "cudnnDestroyActivationDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroyActivationDescriptor(cudnnActivationStruct* activationDesc);

    [DllImport(__DllName, EntryPoint = "cudnnActivationForward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnActivationForward(cudnnContext* handle, cudnnActivationStruct* activationDesc, void* alpha, cudnnTensorStruct* xDesc, void* x, void* beta, cudnnTensorStruct* yDesc, void* y);

    [DllImport(__DllName, EntryPoint = "cudnnCreateLRNDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreateLRNDescriptor(cudnnLRNStruct** normDesc);

    [DllImport(__DllName, EntryPoint = "cudnnSetLRNDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetLRNDescriptor(cudnnLRNStruct* normDesc, uint lrnN, double lrnAlpha, double lrnBeta, double lrnK);

    [DllImport(__DllName, EntryPoint = "cudnnGetLRNDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetLRNDescriptor(cudnnLRNStruct* normDesc, uint* lrnN, double* lrnAlpha, double* lrnBeta, double* lrnK);

    [DllImport(__DllName, EntryPoint = "cudnnDestroyLRNDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroyLRNDescriptor(cudnnLRNStruct* lrnDesc);

    [DllImport(__DllName, EntryPoint = "cudnnLRNCrossChannelForward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnLRNCrossChannelForward(cudnnContext* handle, cudnnLRNStruct* normDesc, cudnnLRNMode_t lrnMode, void* alpha, cudnnTensorStruct* xDesc, void* x, void* beta, cudnnTensorStruct* yDesc, void* y);

    [DllImport(__DllName, EntryPoint = "cudnnDivisiveNormalizationForward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDivisiveNormalizationForward(cudnnContext* handle, cudnnLRNStruct* normDesc, cudnnDivNormMode_t mode, void* alpha, cudnnTensorStruct* xDesc, void* x, void* means, void* temp, void* temp2, void* beta, cudnnTensorStruct* yDesc, void* y);

    [DllImport(__DllName, EntryPoint = "cudnnDeriveBNTensorDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDeriveBNTensorDescriptor(cudnnTensorStruct* derivedBnDesc, cudnnTensorStruct* xDesc, cudnnBatchNormMode_t mode);

    [DllImport(__DllName, EntryPoint = "cudnnBatchNormalizationForwardInference", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnBatchNormalizationForwardInference(cudnnContext* handle, cudnnBatchNormMode_t mode, void* alpha, void* beta, cudnnTensorStruct* xDesc, void* x, cudnnTensorStruct* yDesc, void* y, cudnnTensorStruct* bnScaleBiasMeanVarDesc, void* bnScale, void* bnBias, void* estimatedMean, void* estimatedVariance, double epsilon);

    [DllImport(__DllName, EntryPoint = "cudnnDeriveNormTensorDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDeriveNormTensorDescriptor(cudnnTensorStruct* derivedNormScaleBiasDesc, cudnnTensorStruct* derivedNormMeanVarDesc, cudnnTensorStruct* xDesc, cudnnNormMode_t mode, int groupCnt);

    [DllImport(__DllName, EntryPoint = "cudnnNormalizationForwardInference", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnNormalizationForwardInference(cudnnContext* handle, cudnnNormMode_t mode, cudnnNormOps_t normOps, cudnnNormAlgo_t algo, void* alpha, void* beta, cudnnTensorStruct* xDesc, void* x, cudnnTensorStruct* normScaleBiasDesc, void* normScale, void* normBias, cudnnTensorStruct* normMeanVarDesc, void* estimatedMean, void* estimatedVariance, cudnnTensorStruct* zDesc, void* z, cudnnActivationStruct* activationDesc, cudnnTensorStruct* yDesc, void* y, double epsilon, int groupCnt);

    [DllImport(__DllName, EntryPoint = "cudnnCreateSpatialTransformerDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreateSpatialTransformerDescriptor(cudnnSpatialTransformerStruct** stDesc);

    [DllImport(__DllName, EntryPoint = "cudnnSetSpatialTransformerNdDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetSpatialTransformerNdDescriptor(cudnnSpatialTransformerStruct* stDesc, cudnnSamplerType_t samplerType, cudnnDataType_t dataType, int nbDims, int* dimA);

    [DllImport(__DllName, EntryPoint = "cudnnDestroySpatialTransformerDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroySpatialTransformerDescriptor(cudnnSpatialTransformerStruct* stDesc);

    [DllImport(__DllName, EntryPoint = "cudnnSpatialTfGridGeneratorForward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSpatialTfGridGeneratorForward(cudnnContext* handle, cudnnSpatialTransformerStruct* stDesc, void* theta, void* grid);

    [DllImport(__DllName, EntryPoint = "cudnnSpatialTfSamplerForward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSpatialTfSamplerForward(cudnnContext* handle, cudnnSpatialTransformerStruct* stDesc, void* alpha, cudnnTensorStruct* xDesc, void* x, void* grid, void* beta, cudnnTensorStruct* yDesc, void* y);

    [DllImport(__DllName, EntryPoint = "cudnnCreateDropoutDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreateDropoutDescriptor(cudnnDropoutStruct** dropoutDesc);

    [DllImport(__DllName, EntryPoint = "cudnnDestroyDropoutDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroyDropoutDescriptor(cudnnDropoutStruct* dropoutDesc);

    [DllImport(__DllName, EntryPoint = "cudnnDropoutGetStatesSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDropoutGetStatesSize(cudnnContext* handle, nuint* sizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnDropoutGetReserveSpaceSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDropoutGetReserveSpaceSize(cudnnTensorStruct* xdesc, nuint* sizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnSetDropoutDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetDropoutDescriptor(cudnnDropoutStruct* dropoutDesc, cudnnContext* handle, float dropout, void* states, nuint stateSizeInBytes, ulong seed);

    [DllImport(__DllName, EntryPoint = "cudnnRestoreDropoutDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnRestoreDropoutDescriptor(cudnnDropoutStruct* dropoutDesc, cudnnContext* handle, float dropout, void* states, nuint stateSizeInBytes, ulong seed);

    [DllImport(__DllName, EntryPoint = "cudnnGetDropoutDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetDropoutDescriptor(cudnnDropoutStruct* dropoutDesc, cudnnContext* handle, float* dropout, void** states, ulong* seed);

    [DllImport(__DllName, EntryPoint = "cudnnDropoutForward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDropoutForward(cudnnContext* handle, cudnnDropoutStruct* dropoutDesc, cudnnTensorStruct* xdesc, void* x, cudnnTensorStruct* ydesc, void* y, void* reserveSpace, nuint reserveSpaceSizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnOpsVersionCheck", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnOpsVersionCheck();

    [DllImport(__DllName, EntryPoint = "cudnnSoftmaxBackward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSoftmaxBackward(cudnnContext* handle, cudnnSoftmaxAlgorithm_t algo, cudnnSoftmaxMode_t mode, void* alpha, cudnnTensorStruct* yDesc, void* y, cudnnTensorStruct* dyDesc, void* dy, void* beta, cudnnTensorStruct* dxDesc, void* dx);

    [DllImport(__DllName, EntryPoint = "cudnnPoolingBackward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnPoolingBackward(cudnnContext* handle, cudnnPoolingStruct* poolingDesc, void* alpha, cudnnTensorStruct* yDesc, void* y, cudnnTensorStruct* dyDesc, void* dy, cudnnTensorStruct* xDesc, void* x, void* beta, cudnnTensorStruct* dxDesc, void* dx);

    [DllImport(__DllName, EntryPoint = "cudnnActivationBackward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnActivationBackward(cudnnContext* handle, cudnnActivationStruct* activationDesc, void* alpha, cudnnTensorStruct* yDesc, void* y, cudnnTensorStruct* dyDesc, void* dy, cudnnTensorStruct* xDesc, void* x, void* beta, cudnnTensorStruct* dxDesc, void* dx);

    [DllImport(__DllName, EntryPoint = "cudnnLRNCrossChannelBackward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnLRNCrossChannelBackward(cudnnContext* handle, cudnnLRNStruct* normDesc, cudnnLRNMode_t lrnMode, void* alpha, cudnnTensorStruct* yDesc, void* y, cudnnTensorStruct* dyDesc, void* dy, cudnnTensorStruct* xDesc, void* x, void* beta, cudnnTensorStruct* dxDesc, void* dx);

    [DllImport(__DllName, EntryPoint = "cudnnDivisiveNormalizationBackward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDivisiveNormalizationBackward(cudnnContext* handle, cudnnLRNStruct* normDesc, cudnnDivNormMode_t mode, void* alpha, cudnnTensorStruct* xDesc, void* x, void* means, void* dy, void* temp, void* temp2, void* beta, cudnnTensorStruct* dXdMeansDesc, void* dx, void* dMeans);

    [DllImport(__DllName, EntryPoint = "cudnnGetBatchNormalizationForwardTrainingExWorkspaceSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetBatchNormalizationForwardTrainingExWorkspaceSize(cudnnContext* handle, cudnnBatchNormMode_t mode, cudnnBatchNormOps_t bnOps, cudnnTensorStruct* xDesc, cudnnTensorStruct* zDesc, cudnnTensorStruct* yDesc, cudnnTensorStruct* bnScaleBiasMeanVarDesc, cudnnActivationStruct* activationDesc, nuint* sizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnGetBatchNormalizationBackwardExWorkspaceSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetBatchNormalizationBackwardExWorkspaceSize(cudnnContext* handle, cudnnBatchNormMode_t mode, cudnnBatchNormOps_t bnOps, cudnnTensorStruct* xDesc, cudnnTensorStruct* yDesc, cudnnTensorStruct* dyDesc, cudnnTensorStruct* dzDesc, cudnnTensorStruct* dxDesc, cudnnTensorStruct* dBnScaleBiasDesc, cudnnActivationStruct* activationDesc, nuint* sizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnGetBatchNormalizationTrainingExReserveSpaceSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetBatchNormalizationTrainingExReserveSpaceSize(cudnnContext* handle, cudnnBatchNormMode_t mode, cudnnBatchNormOps_t bnOps, cudnnActivationStruct* activationDesc, cudnnTensorStruct* xDesc, nuint* sizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnBatchNormalizationForwardTraining", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnBatchNormalizationForwardTraining(cudnnContext* handle, cudnnBatchNormMode_t mode, void* alpha, void* beta, cudnnTensorStruct* xDesc, void* x, cudnnTensorStruct* yDesc, void* y, cudnnTensorStruct* bnScaleBiasMeanVarDesc, void* bnScale, void* bnBias, double exponentialAverageFactor, void* resultRunningMean, void* resultRunningVariance, double epsilon, void* resultSaveMean, void* resultSaveInvVariance);

    [DllImport(__DllName, EntryPoint = "cudnnBatchNormalizationForwardTrainingEx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnBatchNormalizationForwardTrainingEx(cudnnContext* handle, cudnnBatchNormMode_t mode, cudnnBatchNormOps_t bnOps, void* alpha, void* beta, cudnnTensorStruct* xDesc, void* xData, cudnnTensorStruct* zDesc, void* zData, cudnnTensorStruct* yDesc, void* yData, cudnnTensorStruct* bnScaleBiasMeanVarDesc, void* bnScale, void* bnBias, double exponentialAverageFactor, void* resultRunningMean, void* resultRunningVariance, double epsilon, void* resultSaveMean, void* resultSaveInvVariance, cudnnActivationStruct* activationDesc, void* workspace, nuint workSpaceSizeInBytes, void* reserveSpace, nuint reserveSpaceSizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnBatchNormalizationBackward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnBatchNormalizationBackward(cudnnContext* handle, cudnnBatchNormMode_t mode, void* alphaDataDiff, void* betaDataDiff, void* alphaParamDiff, void* betaParamDiff, cudnnTensorStruct* xDesc, void* x, cudnnTensorStruct* dyDesc, void* dy, cudnnTensorStruct* dxDesc, void* dx, cudnnTensorStruct* dBnScaleBiasDesc, void* bnScale, void* dBnScaleResult, void* dBnBiasResult, double epsilon, void* savedMean, void* savedInvVariance);

    [DllImport(__DllName, EntryPoint = "cudnnBatchNormalizationBackwardEx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnBatchNormalizationBackwardEx(cudnnContext* handle, cudnnBatchNormMode_t mode, cudnnBatchNormOps_t bnOps, void* alphaDataDiff, void* betaDataDiff, void* alphaParamDiff, void* betaParamDiff, cudnnTensorStruct* xDesc, void* xData, cudnnTensorStruct* yDesc, void* yData, cudnnTensorStruct* dyDesc, void* dyData, cudnnTensorStruct* dzDesc, void* dzData, cudnnTensorStruct* dxDesc, void* dxData, cudnnTensorStruct* dBnScaleBiasDesc, void* bnScaleData, void* bnBiasData, void* dBnScaleData, void* dBnBiasData, double epsilon, void* savedMean, void* savedInvVariance, cudnnActivationStruct* activationDesc, void* workSpace, nuint workSpaceSizeInBytes, void* reserveSpace, nuint reserveSpaceSizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnGetNormalizationForwardTrainingWorkspaceSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetNormalizationForwardTrainingWorkspaceSize(cudnnContext* handle, cudnnNormMode_t mode, cudnnNormOps_t normOps, cudnnNormAlgo_t algo, cudnnTensorStruct* xDesc, cudnnTensorStruct* zDesc, cudnnTensorStruct* yDesc, cudnnTensorStruct* normScaleBiasDesc, cudnnActivationStruct* activationDesc, cudnnTensorStruct* normMeanVarDesc, nuint* sizeInBytes, int groupCnt);

    [DllImport(__DllName, EntryPoint = "cudnnGetNormalizationBackwardWorkspaceSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetNormalizationBackwardWorkspaceSize(cudnnContext* handle, cudnnNormMode_t mode, cudnnNormOps_t normOps, cudnnNormAlgo_t algo, cudnnTensorStruct* xDesc, cudnnTensorStruct* yDesc, cudnnTensorStruct* dyDesc, cudnnTensorStruct* dzDesc, cudnnTensorStruct* dxDesc, cudnnTensorStruct* dNormScaleBiasDesc, cudnnActivationStruct* activationDesc, cudnnTensorStruct* normMeanVarDesc, nuint* sizeInBytes, int groupCnt);

    [DllImport(__DllName, EntryPoint = "cudnnGetNormalizationTrainingReserveSpaceSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetNormalizationTrainingReserveSpaceSize(cudnnContext* handle, cudnnNormMode_t mode, cudnnNormOps_t normOps, cudnnNormAlgo_t algo, cudnnActivationStruct* activationDesc, cudnnTensorStruct* xDesc, nuint* sizeInBytes, int groupCnt);

    [DllImport(__DllName, EntryPoint = "cudnnNormalizationForwardTraining", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnNormalizationForwardTraining(cudnnContext* handle, cudnnNormMode_t mode, cudnnNormOps_t normOps, cudnnNormAlgo_t algo, void* alpha, void* beta, cudnnTensorStruct* xDesc, void* xData, cudnnTensorStruct* normScaleBiasDesc, void* normScale, void* normBias, double exponentialAverageFactor, cudnnTensorStruct* normMeanVarDesc, void* resultRunningMean, void* resultRunningVariance, double epsilon, void* resultSaveMean, void* resultSaveInvVariance, cudnnActivationStruct* activationDesc, cudnnTensorStruct* zDesc, void* zData, cudnnTensorStruct* yDesc, void* yData, void* workspace, nuint workSpaceSizeInBytes, void* reserveSpace, nuint reserveSpaceSizeInBytes, int groupCnt);

    [DllImport(__DllName, EntryPoint = "cudnnNormalizationBackward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnNormalizationBackward(cudnnContext* handle, cudnnNormMode_t mode, cudnnNormOps_t normOps, cudnnNormAlgo_t algo, void* alphaDataDiff, void* betaDataDiff, void* alphaParamDiff, void* betaParamDiff, cudnnTensorStruct* xDesc, void* xData, cudnnTensorStruct* yDesc, void* yData, cudnnTensorStruct* dyDesc, void* dyData, cudnnTensorStruct* dzDesc, void* dzData, cudnnTensorStruct* dxDesc, void* dxData, cudnnTensorStruct* dNormScaleBiasDesc, void* normScaleData, void* normBiasData, void* dNormScaleData, void* dNormBiasData, double epsilon, cudnnTensorStruct* normMeanVarDesc, void* savedMean, void* savedInvVariance, cudnnActivationStruct* activationDesc, void* workSpace, nuint workSpaceSizeInBytes, void* reserveSpace, nuint reserveSpaceSizeInBytes, int groupCnt);

    [DllImport(__DllName, EntryPoint = "cudnnSpatialTfGridGeneratorBackward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSpatialTfGridGeneratorBackward(cudnnContext* handle, cudnnSpatialTransformerStruct* stDesc, void* dgrid, void* dtheta);

    [DllImport(__DllName, EntryPoint = "cudnnSpatialTfSamplerBackward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSpatialTfSamplerBackward(cudnnContext* handle, cudnnSpatialTransformerStruct* stDesc, void* alpha, cudnnTensorStruct* xDesc, void* x, void* beta, cudnnTensorStruct* dxDesc, void* dx, void* alphaDgrid, cudnnTensorStruct* dyDesc, void* dy, void* grid, void* betaDgrid, void* dgrid);

    [DllImport(__DllName, EntryPoint = "cudnnDropoutBackward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDropoutBackward(cudnnContext* handle, cudnnDropoutStruct* dropoutDesc, cudnnTensorStruct* dydesc, void* dy, cudnnTensorStruct* dxdesc, void* dx, void* reserveSpace, nuint reserveSpaceSizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnCreateRNNDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreateRNNDescriptor(cudnnRNNStruct** rnnDesc);

    [DllImport(__DllName, EntryPoint = "cudnnDestroyRNNDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroyRNNDescriptor(cudnnRNNStruct* rnnDesc);

    [DllImport(__DllName, EntryPoint = "cudnnSetRNNDescriptor_v8", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetRNNDescriptor_v8(cudnnRNNStruct* rnnDesc, cudnnRNNAlgo_t algo, cudnnRNNMode_t cellMode, cudnnRNNBiasMode_t biasMode, cudnnDirectionMode_t dirMode, cudnnRNNInputMode_t inputMode, cudnnDataType_t dataType, cudnnDataType_t mathPrec, cudnnMathType_t mathType, int inputSize, int hiddenSize, int projSize, int numLayers, cudnnDropoutStruct* dropoutDesc, uint auxFlags);

    [DllImport(__DllName, EntryPoint = "cudnnGetRNNDescriptor_v8", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetRNNDescriptor_v8(cudnnRNNStruct* rnnDesc, cudnnRNNAlgo_t* algo, cudnnRNNMode_t* cellMode, cudnnRNNBiasMode_t* biasMode, cudnnDirectionMode_t* dirMode, cudnnRNNInputMode_t* inputMode, cudnnDataType_t* dataType, cudnnDataType_t* mathPrec, cudnnMathType_t* mathType, int* inputSize, int* hiddenSize, int* projSize, int* numLayers, cudnnDropoutStruct** dropoutDesc, uint* auxFlags);

    [DllImport(__DllName, EntryPoint = "cudnnRNNSetClip_v8", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnRNNSetClip_v8(cudnnRNNStruct* rnnDesc, cudnnRNNClipMode_t clipMode, cudnnNanPropagation_t clipNanOpt, double lclip, double rclip);

    [DllImport(__DllName, EntryPoint = "cudnnRNNSetClip_v9", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnRNNSetClip_v9(cudnnRNNStruct* rnnDesc, cudnnRNNClipMode_t clipMode, double lclip, double rclip);

    [DllImport(__DllName, EntryPoint = "cudnnRNNGetClip_v8", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnRNNGetClip_v8(cudnnRNNStruct* rnnDesc, cudnnRNNClipMode_t* clipMode, cudnnNanPropagation_t* clipNanOpt, double* lclip, double* rclip);

    [DllImport(__DllName, EntryPoint = "cudnnRNNGetClip_v9", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnRNNGetClip_v9(cudnnRNNStruct* rnnDesc, cudnnRNNClipMode_t* clipMode, double* lclip, double* rclip);

    [DllImport(__DllName, EntryPoint = "cudnnBuildRNNDynamic", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnBuildRNNDynamic(cudnnContext* handle, cudnnRNNStruct* rnnDesc, int miniBatch);

    [DllImport(__DllName, EntryPoint = "cudnnGetRNNTempSpaceSizes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetRNNTempSpaceSizes(cudnnContext* handle, cudnnRNNStruct* rnnDesc, cudnnForwardMode_t fwdMode, cudnnRNNDataStruct* xDesc, nuint* workSpaceSize, nuint* reserveSpaceSize);

    [DllImport(__DllName, EntryPoint = "cudnnGetRNNWeightSpaceSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetRNNWeightSpaceSize(cudnnContext* handle, cudnnRNNStruct* rnnDesc, nuint* weightSpaceSize);

    [DllImport(__DllName, EntryPoint = "cudnnGetRNNWeightParams", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetRNNWeightParams(cudnnContext* handle, cudnnRNNStruct* rnnDesc, int pseudoLayer, nuint weightSpaceSize, void* weightSpace, int linLayerID, cudnnTensorStruct* mDesc, void** mAddr, cudnnTensorStruct* bDesc, void** bAddr);

    [DllImport(__DllName, EntryPoint = "cudnnCreateRNNDataDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreateRNNDataDescriptor(cudnnRNNDataStruct** rnnDataDesc);

    [DllImport(__DllName, EntryPoint = "cudnnDestroyRNNDataDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroyRNNDataDescriptor(cudnnRNNDataStruct* rnnDataDesc);

    [DllImport(__DllName, EntryPoint = "cudnnSetRNNDataDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetRNNDataDescriptor(cudnnRNNDataStruct* rnnDataDesc, cudnnDataType_t dataType, cudnnRNNDataLayout_t layout, int maxSeqLength, int batchSize, int vectorSize, int* seqLengthArray, void* paddingFill);

    [DllImport(__DllName, EntryPoint = "cudnnGetRNNDataDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetRNNDataDescriptor(cudnnRNNDataStruct* rnnDataDesc, cudnnDataType_t* dataType, cudnnRNNDataLayout_t* layout, int* maxSeqLength, int* batchSize, int* vectorSize, int arrayLengthRequested, int* seqLengthArray, void* paddingFill);

    [DllImport(__DllName, EntryPoint = "cudnnRNNForward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnRNNForward(cudnnContext* handle, cudnnRNNStruct* rnnDesc, cudnnForwardMode_t fwdMode, int* devSeqLengths, cudnnRNNDataStruct* xDesc, void* x, cudnnRNNDataStruct* yDesc, void* y, cudnnTensorStruct* hDesc, void* hx, void* hy, cudnnTensorStruct* cDesc, void* cx, void* cy, nuint weightSpaceSize, void* weightSpace, nuint workSpaceSize, void* workSpace, nuint reserveSpaceSize, void* reserveSpace);

    [DllImport(__DllName, EntryPoint = "cudnnCreateSeqDataDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreateSeqDataDescriptor(cudnnSeqDataStruct** seqDataDesc);

    [DllImport(__DllName, EntryPoint = "cudnnDestroySeqDataDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroySeqDataDescriptor(cudnnSeqDataStruct* seqDataDesc);

    [DllImport(__DllName, EntryPoint = "cudnnSetSeqDataDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetSeqDataDescriptor(cudnnSeqDataStruct* seqDataDesc, cudnnDataType_t dataType, int nbDims, int* dimA, cudnnSeqDataAxis_t* axes, nuint seqLengthArraySize, int* seqLengthArray, void* paddingFill);

    [DllImport(__DllName, EntryPoint = "cudnnGetSeqDataDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetSeqDataDescriptor(cudnnSeqDataStruct* seqDataDesc, cudnnDataType_t* dataType, int* nbDims, int nbDimsRequested, int* dimA, cudnnSeqDataAxis_t* axes, nuint* seqLengthArraySize, nuint seqLengthSizeRequested, int* seqLengthArray, void* paddingFill);

    [DllImport(__DllName, EntryPoint = "cudnnCreateAttnDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreateAttnDescriptor(cudnnAttnStruct** attnDesc);

    [DllImport(__DllName, EntryPoint = "cudnnDestroyAttnDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroyAttnDescriptor(cudnnAttnStruct* attnDesc);

    [DllImport(__DllName, EntryPoint = "cudnnSetAttnDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetAttnDescriptor(cudnnAttnStruct* attnDesc, uint attnMode, int nHeads, double smScaler, cudnnDataType_t dataType, cudnnDataType_t computePrec, cudnnMathType_t mathType, cudnnDropoutStruct* attnDropoutDesc, cudnnDropoutStruct* postDropoutDesc, int qSize, int kSize, int vSize, int qProjSize, int kProjSize, int vProjSize, int oProjSize, int qoMaxSeqLength, int kvMaxSeqLength, int maxBatchSize, int maxBeamSize);

    [DllImport(__DllName, EntryPoint = "cudnnGetAttnDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetAttnDescriptor(cudnnAttnStruct* attnDesc, uint* attnMode, int* nHeads, double* smScaler, cudnnDataType_t* dataType, cudnnDataType_t* computePrec, cudnnMathType_t* mathType, cudnnDropoutStruct** attnDropoutDesc, cudnnDropoutStruct** postDropoutDesc, int* qSize, int* kSize, int* vSize, int* qProjSize, int* kProjSize, int* vProjSize, int* oProjSize, int* qoMaxSeqLength, int* kvMaxSeqLength, int* maxBatchSize, int* maxBeamSize);

    [DllImport(__DllName, EntryPoint = "cudnnGetMultiHeadAttnBuffers", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetMultiHeadAttnBuffers(cudnnContext* handle, cudnnAttnStruct* attnDesc, nuint* weightSizeInBytes, nuint* workSpaceSizeInBytes, nuint* reserveSpaceSizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnGetMultiHeadAttnWeights", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetMultiHeadAttnWeights(cudnnContext* handle, cudnnAttnStruct* attnDesc, cudnnMultiHeadAttnWeightKind_t wKind, nuint weightSizeInBytes, void* weights, cudnnTensorStruct* wDesc, void** wAddr);

    [DllImport(__DllName, EntryPoint = "cudnnMultiHeadAttnForward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnMultiHeadAttnForward(cudnnContext* handle, cudnnAttnStruct* attnDesc, int currIdx, int* loWinIdx, int* hiWinIdx, int* devSeqLengthsQO, int* devSeqLengthsKV, cudnnSeqDataStruct* qDesc, void* queries, void* residuals, cudnnSeqDataStruct* kDesc, void* keys, cudnnSeqDataStruct* vDesc, void* values, cudnnSeqDataStruct* oDesc, void* @out, nuint weightSizeInBytes, void* weights, nuint workSpaceSizeInBytes, void* workSpace, nuint reserveSpaceSizeInBytes, void* reserveSpace);

    [DllImport(__DllName, EntryPoint = "cudnnAdvVersionCheck", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnAdvVersionCheck();

    [DllImport(__DllName, EntryPoint = "cudnnRNNBackwardData_v8", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnRNNBackwardData_v8(cudnnContext* handle, cudnnRNNStruct* rnnDesc, int* devSeqLengths, cudnnRNNDataStruct* yDesc, void* y, void* dy, cudnnRNNDataStruct* xDesc, void* dx, cudnnTensorStruct* hDesc, void* hx, void* dhy, void* dhx, cudnnTensorStruct* cDesc, void* cx, void* dcy, void* dcx, nuint weightSpaceSize, void* weightSpace, nuint workSpaceSize, void* workSpace, nuint reserveSpaceSize, void* reserveSpace);

    [DllImport(__DllName, EntryPoint = "cudnnRNNBackwardWeights_v8", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnRNNBackwardWeights_v8(cudnnContext* handle, cudnnRNNStruct* rnnDesc, cudnnWgradMode_t addGrad, int* devSeqLengths, cudnnRNNDataStruct* xDesc, void* x, cudnnTensorStruct* hDesc, void* hx, cudnnRNNDataStruct* yDesc, void* y, nuint weightSpaceSize, void* dweightSpace, nuint workSpaceSize, void* workSpace, nuint reserveSpaceSize, void* reserveSpace);

    [DllImport(__DllName, EntryPoint = "cudnnMultiHeadAttnBackwardData", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnMultiHeadAttnBackwardData(cudnnContext* handle, cudnnAttnStruct* attnDesc, int* loWinIdx, int* hiWinIdx, int* devSeqLengthsDQDO, int* devSeqLengthsDKDV, cudnnSeqDataStruct* doDesc, void* dout, cudnnSeqDataStruct* dqDesc, void* dqueries, void* queries, cudnnSeqDataStruct* dkDesc, void* dkeys, void* keys, cudnnSeqDataStruct* dvDesc, void* dvalues, void* values, nuint weightSizeInBytes, void* weights, nuint workSpaceSizeInBytes, void* workSpace, nuint reserveSpaceSizeInBytes, void* reserveSpace);

    [DllImport(__DllName, EntryPoint = "cudnnMultiHeadAttnBackwardWeights", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnMultiHeadAttnBackwardWeights(cudnnContext* handle, cudnnAttnStruct* attnDesc, cudnnWgradMode_t addGrad, cudnnSeqDataStruct* qDesc, void* queries, cudnnSeqDataStruct* kDesc, void* keys, cudnnSeqDataStruct* vDesc, void* values, cudnnSeqDataStruct* doDesc, void* dout, nuint weightSizeInBytes, void* weights, void* dweights, nuint workSpaceSizeInBytes, void* workSpace, nuint reserveSpaceSizeInBytes, void* reserveSpace);

    [DllImport(__DllName, EntryPoint = "cudnnCreateCTCLossDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreateCTCLossDescriptor(cudnnCTCLossStruct** ctcLossDesc);

    [DllImport(__DllName, EntryPoint = "cudnnSetCTCLossDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetCTCLossDescriptor(cudnnCTCLossStruct* ctcLossDesc, cudnnDataType_t compType);

    [DllImport(__DllName, EntryPoint = "cudnnSetCTCLossDescriptorEx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetCTCLossDescriptorEx(cudnnCTCLossStruct* ctcLossDesc, cudnnDataType_t compType, cudnnLossNormalizationMode_t normMode, cudnnNanPropagation_t gradMode);

    [DllImport(__DllName, EntryPoint = "cudnnSetCTCLossDescriptor_v8", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetCTCLossDescriptor_v8(cudnnCTCLossStruct* ctcLossDesc, cudnnDataType_t compType, cudnnLossNormalizationMode_t normMode, cudnnNanPropagation_t gradMode, int maxLabelLength);

    [DllImport(__DllName, EntryPoint = "cudnnSetCTCLossDescriptor_v9", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetCTCLossDescriptor_v9(cudnnCTCLossStruct* ctcLossDesc, cudnnDataType_t compType, cudnnLossNormalizationMode_t normMode, cudnnCTCGradMode_t ctcGradMode, int maxLabelLength);

    [DllImport(__DllName, EntryPoint = "cudnnGetCTCLossDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetCTCLossDescriptor(cudnnCTCLossStruct* ctcLossDesc, cudnnDataType_t* compType);

    [DllImport(__DllName, EntryPoint = "cudnnGetCTCLossDescriptorEx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetCTCLossDescriptorEx(cudnnCTCLossStruct* ctcLossDesc, cudnnDataType_t* compType, cudnnLossNormalizationMode_t* normMode, cudnnNanPropagation_t* gradMode);

    [DllImport(__DllName, EntryPoint = "cudnnGetCTCLossDescriptor_v8", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetCTCLossDescriptor_v8(cudnnCTCLossStruct* ctcLossDesc, cudnnDataType_t* compType, cudnnLossNormalizationMode_t* normMode, cudnnNanPropagation_t* gradMode, int* maxLabelLength);

    [DllImport(__DllName, EntryPoint = "cudnnGetCTCLossDescriptor_v9", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetCTCLossDescriptor_v9(cudnnCTCLossStruct* ctcLossDesc, cudnnDataType_t* compType, cudnnLossNormalizationMode_t* normMode, cudnnCTCGradMode_t* ctcGradMode, int* maxLabelLength);

    [DllImport(__DllName, EntryPoint = "cudnnDestroyCTCLossDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroyCTCLossDescriptor(cudnnCTCLossStruct* ctcLossDesc);

    [DllImport(__DllName, EntryPoint = "cudnnCTCLoss", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCTCLoss(cudnnContext* handle, cudnnTensorStruct* probsDesc, void* probs, int* hostLabels, int* hostLabelLengths, int* hostInputLengths, void* costs, cudnnTensorStruct* gradientsDesc, void* gradients, cudnnCTCLossAlgo_t algo, cudnnCTCLossStruct* ctcLossDesc, void* workspace, nuint workSpaceSizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnCTCLoss_v8", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCTCLoss_v8(cudnnContext* handle, cudnnCTCLossAlgo_t algo, cudnnCTCLossStruct* ctcLossDesc, cudnnTensorStruct* probsDesc, void* probs, int* labels, int* labelLengths, int* inputLengths, void* costs, cudnnTensorStruct* gradientsDesc, void* gradients, nuint workSpaceSizeInBytes, void* workspace);

    [DllImport(__DllName, EntryPoint = "cudnnGetCTCLossWorkspaceSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetCTCLossWorkspaceSize(cudnnContext* handle, cudnnTensorStruct* probsDesc, cudnnTensorStruct* gradientsDesc, int* labels, int* labelLengths, int* inputLengths, cudnnCTCLossAlgo_t algo, cudnnCTCLossStruct* ctcLossDesc, nuint* sizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnGetCTCLossWorkspaceSize_v8", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetCTCLossWorkspaceSize_v8(cudnnContext* handle, cudnnCTCLossAlgo_t algo, cudnnCTCLossStruct* ctcLossDesc, cudnnTensorStruct* probsDesc, cudnnTensorStruct* gradientsDesc, nuint* sizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnCreateConvolutionDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreateConvolutionDescriptor(cudnnConvolutionStruct** convDesc);

    [DllImport(__DllName, EntryPoint = "cudnnDestroyConvolutionDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroyConvolutionDescriptor(cudnnConvolutionStruct* convDesc);

    [DllImport(__DllName, EntryPoint = "cudnnSetConvolutionMathType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetConvolutionMathType(cudnnConvolutionStruct* convDesc, cudnnMathType_t mathType);

    [DllImport(__DllName, EntryPoint = "cudnnGetConvolutionMathType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetConvolutionMathType(cudnnConvolutionStruct* convDesc, cudnnMathType_t* mathType);

    [DllImport(__DllName, EntryPoint = "cudnnSetConvolutionGroupCount", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetConvolutionGroupCount(cudnnConvolutionStruct* convDesc, int groupCount);

    [DllImport(__DllName, EntryPoint = "cudnnGetConvolutionGroupCount", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetConvolutionGroupCount(cudnnConvolutionStruct* convDesc, int* groupCount);

    [DllImport(__DllName, EntryPoint = "cudnnSetConvolutionReorderType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetConvolutionReorderType(cudnnConvolutionStruct* convDesc, cudnnReorderType_t reorderType);

    [DllImport(__DllName, EntryPoint = "cudnnGetConvolutionReorderType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetConvolutionReorderType(cudnnConvolutionStruct* convDesc, cudnnReorderType_t* reorderType);

    [DllImport(__DllName, EntryPoint = "cudnnSetConvolution2dDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetConvolution2dDescriptor(cudnnConvolutionStruct* convDesc, int pad_h, int pad_w, int u, int v, int dilation_h, int dilation_w, cudnnConvolutionMode_t mode, cudnnDataType_t computeType);

    [DllImport(__DllName, EntryPoint = "cudnnGetConvolution2dDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetConvolution2dDescriptor(cudnnConvolutionStruct* convDesc, int* pad_h, int* pad_w, int* u, int* v, int* dilation_h, int* dilation_w, cudnnConvolutionMode_t* mode, cudnnDataType_t* computeType);

    [DllImport(__DllName, EntryPoint = "cudnnSetConvolutionNdDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetConvolutionNdDescriptor(cudnnConvolutionStruct* convDesc, int arrayLength, int* padA, int* filterStrideA, int* dilationA, cudnnConvolutionMode_t mode, cudnnDataType_t computeType);

    [DllImport(__DllName, EntryPoint = "cudnnGetConvolutionNdDescriptor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetConvolutionNdDescriptor(cudnnConvolutionStruct* convDesc, int arrayLengthRequested, int* arrayLength, int* padA, int* strideA, int* dilationA, cudnnConvolutionMode_t* mode, cudnnDataType_t* computeType);

    [DllImport(__DllName, EntryPoint = "cudnnGetConvolution2dForwardOutputDim", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetConvolution2dForwardOutputDim(cudnnConvolutionStruct* convDesc, cudnnTensorStruct* inputTensorDesc, cudnnFilterStruct* filterDesc, int* n, int* c, int* h, int* w);

    [DllImport(__DllName, EntryPoint = "cudnnGetConvolutionNdForwardOutputDim", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetConvolutionNdForwardOutputDim(cudnnConvolutionStruct* convDesc, cudnnTensorStruct* inputTensorDesc, cudnnFilterStruct* filterDesc, int nbDims, int* tensorOuputDimA);

    [DllImport(__DllName, EntryPoint = "cudnnGetConvolutionForwardAlgorithmMaxCount", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetConvolutionForwardAlgorithmMaxCount(cudnnContext* handle, int* count);

    [DllImport(__DllName, EntryPoint = "cudnnGetConvolutionForwardAlgorithm_v7", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetConvolutionForwardAlgorithm_v7(cudnnContext* handle, cudnnTensorStruct* srcDesc, cudnnFilterStruct* filterDesc, cudnnConvolutionStruct* convDesc, cudnnTensorStruct* destDesc, int requestedAlgoCount, int* returnedAlgoCount, cudnnConvolutionFwdAlgoPerfStruct* perfResults);

    [DllImport(__DllName, EntryPoint = "cudnnFindConvolutionForwardAlgorithm", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnFindConvolutionForwardAlgorithm(cudnnContext* handle, cudnnTensorStruct* xDesc, cudnnFilterStruct* wDesc, cudnnConvolutionStruct* convDesc, cudnnTensorStruct* yDesc, int requestedAlgoCount, int* returnedAlgoCount, cudnnConvolutionFwdAlgoPerfStruct* perfResults);

    [DllImport(__DllName, EntryPoint = "cudnnFindConvolutionForwardAlgorithmEx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnFindConvolutionForwardAlgorithmEx(cudnnContext* handle, cudnnTensorStruct* xDesc, void* x, cudnnFilterStruct* wDesc, void* w, cudnnConvolutionStruct* convDesc, cudnnTensorStruct* yDesc, void* y, int requestedAlgoCount, int* returnedAlgoCount, cudnnConvolutionFwdAlgoPerfStruct* perfResults, void* workSpace, nuint workSpaceSizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnIm2Col", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnIm2Col(cudnnContext* handle, cudnnTensorStruct* xDesc, void* x, cudnnFilterStruct* wDesc, cudnnConvolutionStruct* convDesc, void* colBuffer);

    [DllImport(__DllName, EntryPoint = "cudnnReorderFilterAndBias", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnReorderFilterAndBias(cudnnContext* handle, cudnnFilterStruct* filterDesc, cudnnReorderType_t reorderType, void* filterData, void* reorderedFilterData, int reorderBias, void* biasData, void* reorderedBiasData);

    [DllImport(__DllName, EntryPoint = "cudnnGetConvolutionForwardWorkspaceSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetConvolutionForwardWorkspaceSize(cudnnContext* handle, cudnnTensorStruct* xDesc, cudnnFilterStruct* wDesc, cudnnConvolutionStruct* convDesc, cudnnTensorStruct* yDesc, cudnnConvolutionFwdAlgo_t algo, nuint* sizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnConvolutionForward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnConvolutionForward(cudnnContext* handle, void* alpha, cudnnTensorStruct* xDesc, void* x, cudnnFilterStruct* wDesc, void* w, cudnnConvolutionStruct* convDesc, cudnnConvolutionFwdAlgo_t algo, void* workSpace, nuint workSpaceSizeInBytes, void* beta, cudnnTensorStruct* yDesc, void* y);

    [DllImport(__DllName, EntryPoint = "cudnnConvolutionBiasActivationForward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnConvolutionBiasActivationForward(cudnnContext* handle, void* alpha1, cudnnTensorStruct* xDesc, void* x, cudnnFilterStruct* wDesc, void* w, cudnnConvolutionStruct* convDesc, cudnnConvolutionFwdAlgo_t algo, void* workSpace, nuint workSpaceSizeInBytes, void* alpha2, cudnnTensorStruct* zDesc, void* z, cudnnTensorStruct* biasDesc, void* bias, cudnnActivationStruct* activationDesc, cudnnTensorStruct* yDesc, void* y);

    [DllImport(__DllName, EntryPoint = "cudnnGetConvolutionBackwardDataAlgorithmMaxCount", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetConvolutionBackwardDataAlgorithmMaxCount(cudnnContext* handle, int* count);

    [DllImport(__DllName, EntryPoint = "cudnnFindConvolutionBackwardDataAlgorithm", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnFindConvolutionBackwardDataAlgorithm(cudnnContext* handle, cudnnFilterStruct* wDesc, cudnnTensorStruct* dyDesc, cudnnConvolutionStruct* convDesc, cudnnTensorStruct* dxDesc, int requestedAlgoCount, int* returnedAlgoCount, cudnnConvolutionBwdDataAlgoPerfStruct* perfResults);

    [DllImport(__DllName, EntryPoint = "cudnnFindConvolutionBackwardDataAlgorithmEx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnFindConvolutionBackwardDataAlgorithmEx(cudnnContext* handle, cudnnFilterStruct* wDesc, void* w, cudnnTensorStruct* dyDesc, void* dy, cudnnConvolutionStruct* convDesc, cudnnTensorStruct* dxDesc, void* dx, int requestedAlgoCount, int* returnedAlgoCount, cudnnConvolutionBwdDataAlgoPerfStruct* perfResults, void* workSpace, nuint workSpaceSizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnGetConvolutionBackwardDataAlgorithm_v7", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetConvolutionBackwardDataAlgorithm_v7(cudnnContext* handle, cudnnFilterStruct* filterDesc, cudnnTensorStruct* diffDesc, cudnnConvolutionStruct* convDesc, cudnnTensorStruct* gradDesc, int requestedAlgoCount, int* returnedAlgoCount, cudnnConvolutionBwdDataAlgoPerfStruct* perfResults);

    [DllImport(__DllName, EntryPoint = "cudnnGetConvolutionBackwardDataWorkspaceSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetConvolutionBackwardDataWorkspaceSize(cudnnContext* handle, cudnnFilterStruct* wDesc, cudnnTensorStruct* dyDesc, cudnnConvolutionStruct* convDesc, cudnnTensorStruct* dxDesc, cudnnConvolutionBwdDataAlgo_t algo, nuint* sizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnConvolutionBackwardData", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnConvolutionBackwardData(cudnnContext* handle, void* alpha, cudnnFilterStruct* wDesc, void* w, cudnnTensorStruct* dyDesc, void* dy, cudnnConvolutionStruct* convDesc, cudnnConvolutionBwdDataAlgo_t algo, void* workSpace, nuint workSpaceSizeInBytes, void* beta, cudnnTensorStruct* dxDesc, void* dx);

    [DllImport(__DllName, EntryPoint = "cudnnGetFoldedConvBackwardDataDescriptors", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetFoldedConvBackwardDataDescriptors(cudnnContext* handle, cudnnFilterStruct* filterDesc, cudnnTensorStruct* diffDesc, cudnnConvolutionStruct* convDesc, cudnnTensorStruct* gradDesc, cudnnTensorFormat_t transformFormat, cudnnFilterStruct* foldedFilterDesc, cudnnTensorStruct* paddedDiffDesc, cudnnConvolutionStruct* foldedConvDesc, cudnnTensorStruct* foldedGradDesc, cudnnTensorTransformStruct* filterFoldTransDesc, cudnnTensorTransformStruct* diffPadTransDesc, cudnnTensorTransformStruct* gradFoldTransDesc, cudnnTensorTransformStruct* gradUnfoldTransDesc);

    [DllImport(__DllName, EntryPoint = "cudnnCnnVersionCheck", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCnnVersionCheck();

    [DllImport(__DllName, EntryPoint = "cudnnGetConvolutionBackwardFilterAlgorithmMaxCount", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetConvolutionBackwardFilterAlgorithmMaxCount(cudnnContext* handle, int* count);

    [DllImport(__DllName, EntryPoint = "cudnnFindConvolutionBackwardFilterAlgorithm", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnFindConvolutionBackwardFilterAlgorithm(cudnnContext* handle, cudnnTensorStruct* xDesc, cudnnTensorStruct* dyDesc, cudnnConvolutionStruct* convDesc, cudnnFilterStruct* dwDesc, int requestedAlgoCount, int* returnedAlgoCount, cudnnConvolutionBwdFilterAlgoPerfStruct* perfResults);

    [DllImport(__DllName, EntryPoint = "cudnnFindConvolutionBackwardFilterAlgorithmEx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnFindConvolutionBackwardFilterAlgorithmEx(cudnnContext* handle, cudnnTensorStruct* xDesc, void* x, cudnnTensorStruct* dyDesc, void* y, cudnnConvolutionStruct* convDesc, cudnnFilterStruct* dwDesc, void* dw, int requestedAlgoCount, int* returnedAlgoCount, cudnnConvolutionBwdFilterAlgoPerfStruct* perfResults, void* workSpace, nuint workSpaceSizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnGetConvolutionBackwardFilterAlgorithm_v7", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetConvolutionBackwardFilterAlgorithm_v7(cudnnContext* handle, cudnnTensorStruct* srcDesc, cudnnTensorStruct* diffDesc, cudnnConvolutionStruct* convDesc, cudnnFilterStruct* gradDesc, int requestedAlgoCount, int* returnedAlgoCount, cudnnConvolutionBwdFilterAlgoPerfStruct* perfResults);

    [DllImport(__DllName, EntryPoint = "cudnnGetConvolutionBackwardFilterWorkspaceSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetConvolutionBackwardFilterWorkspaceSize(cudnnContext* handle, cudnnTensorStruct* xDesc, cudnnTensorStruct* dyDesc, cudnnConvolutionStruct* convDesc, cudnnFilterStruct* gradDesc, cudnnConvolutionBwdFilterAlgo_t algo, nuint* sizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnConvolutionBackwardFilter", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnConvolutionBackwardFilter(cudnnContext* handle, void* alpha, cudnnTensorStruct* xDesc, void* x, cudnnTensorStruct* dyDesc, void* dy, cudnnConvolutionStruct* convDesc, cudnnConvolutionBwdFilterAlgo_t algo, void* workSpace, nuint workSpaceSizeInBytes, void* beta, cudnnFilterStruct* dwDesc, void* dw);

    [DllImport(__DllName, EntryPoint = "cudnnConvolutionBackwardBias", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnConvolutionBackwardBias(cudnnContext* handle, void* alpha, cudnnTensorStruct* dyDesc, void* dy, void* beta, cudnnTensorStruct* dbDesc, void* db);

    [DllImport(__DllName, EntryPoint = "cudnnCreateFusedOpsConstParamPack", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreateFusedOpsConstParamPack(cudnnFusedOpsConstParamStruct** constPack, cudnnFusedOps_t ops);

    [DllImport(__DllName, EntryPoint = "cudnnDestroyFusedOpsConstParamPack", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroyFusedOpsConstParamPack(cudnnFusedOpsConstParamStruct* constPack);

    [DllImport(__DllName, EntryPoint = "cudnnSetFusedOpsConstParamPackAttribute", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetFusedOpsConstParamPackAttribute(cudnnFusedOpsConstParamStruct* constPack, cudnnFusedOpsConstParamLabel_t paramLabel, void* param);

    [DllImport(__DllName, EntryPoint = "cudnnGetFusedOpsConstParamPackAttribute", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetFusedOpsConstParamPackAttribute(cudnnFusedOpsConstParamStruct* constPack, cudnnFusedOpsConstParamLabel_t paramLabel, void* param, int* isNULL);

    [DllImport(__DllName, EntryPoint = "cudnnCreateFusedOpsVariantParamPack", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreateFusedOpsVariantParamPack(cudnnFusedOpsVariantParamStruct** varPack, cudnnFusedOps_t ops);

    [DllImport(__DllName, EntryPoint = "cudnnDestroyFusedOpsVariantParamPack", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroyFusedOpsVariantParamPack(cudnnFusedOpsVariantParamStruct* varPack);

    [DllImport(__DllName, EntryPoint = "cudnnSetFusedOpsVariantParamPackAttribute", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnSetFusedOpsVariantParamPackAttribute(cudnnFusedOpsVariantParamStruct* varPack, cudnnFusedOpsVariantParamLabel_t paramLabel, void* ptr);

    [DllImport(__DllName, EntryPoint = "cudnnGetFusedOpsVariantParamPackAttribute", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnGetFusedOpsVariantParamPackAttribute(cudnnFusedOpsVariantParamStruct* varPack, cudnnFusedOpsVariantParamLabel_t paramLabel, void* ptr);

    [DllImport(__DllName, EntryPoint = "cudnnCreateFusedOpsPlan", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnCreateFusedOpsPlan(cudnnFusedOpsPlanStruct** plan, cudnnFusedOps_t ops);

    [DllImport(__DllName, EntryPoint = "cudnnDestroyFusedOpsPlan", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnDestroyFusedOpsPlan(cudnnFusedOpsPlanStruct* plan);

    [DllImport(__DllName, EntryPoint = "cudnnMakeFusedOpsPlan", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnMakeFusedOpsPlan(cudnnContext* handle, cudnnFusedOpsPlanStruct* plan, cudnnFusedOpsConstParamStruct* constPack, nuint* workspaceSizeInBytes);

    [DllImport(__DllName, EntryPoint = "cudnnFusedOpsExecute", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
    public static extern cudnnStatus_t cudnnFusedOpsExecute(cudnnContext* handle, cudnnFusedOpsPlanStruct* plan, cudnnFusedOpsVariantParamStruct* varPack);


}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnContext
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe struct cudnnBackendDescriptor_t
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnRuntimeTag_t
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnDebugStruct
{
    public uint cudnn_version;
    public cudnnStatus_t cudnnStatus;
    public uint time_sec;
    public uint time_usec;
    public uint time_delta;
    public cudnnContext* handle;
    public CUstream_st* stream;
    public ulong pid;
    public ulong tid;
    public int cudaDeviceId;
    public fixed int reserved[15];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnTensorStruct
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnPoolingStruct
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnFilterStruct
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnLRNStruct
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnActivationStruct
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnSpatialTransformerStruct
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnOpTensorStruct
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnReduceTensorStruct
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnCTCLossStruct
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnTensorTransformStruct
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnDropoutStruct
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnRNNStruct
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnRNNDataStruct
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnSeqDataStruct
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnAttnStruct
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnConvolutionStruct
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnConvolutionFwdAlgoPerfStruct
{
    public cudnnConvolutionFwdAlgo_t algo;
    public cudnnStatus_t status;
    public float time;
    public nuint memory;
    public cudnnDeterminism_t determinism;
    public cudnnMathType_t mathType;
    public fixed int reserved[3];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnConvolutionBwdDataAlgoPerfStruct
{
    public cudnnConvolutionBwdDataAlgo_t algo;
    public cudnnStatus_t status;
    public float time;
    public nuint memory;
    public cudnnDeterminism_t determinism;
    public cudnnMathType_t mathType;
    public fixed int reserved[3];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnFusedOpsConstParamStruct
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnFusedOpsVariantParamStruct
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnFusedOpsPlanStruct
{
    public fixed byte _unused[1];
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct cudnnConvolutionBwdFilterAlgoPerfStruct
{
    public cudnnConvolutionBwdFilterAlgo_t algo;
    public cudnnStatus_t status;
    public float time;
    public nuint memory;
    public cudnnDeterminism_t determinism;
    public cudnnMathType_t mathType;
    public fixed int reserved[3];
}

public enum cudnnStatus_t : int
{
    CUDNN_STATUS_SUCCESS = 0,
    CUDNN_STATUS_NOT_INITIALIZED = 1001,
    CUDNN_STATUS_SUBLIBRARY_VERSION_MISMATCH = 1002,
    CUDNN_STATUS_SERIALIZATION_VERSION_MISMATCH = 1003,
    CUDNN_STATUS_DEPRECATED = 1004,
    CUDNN_STATUS_LICENSE_ERROR = 1005,
    CUDNN_STATUS_RUNTIME_IN_PROGRESS = 1006,
    CUDNN_STATUS_RUNTIME_FP_OVERFLOW = 1007,
    CUDNN_STATUS_SUBLIBRARY_LOADING_FAILED = 1008,
    CUDNN_STATUS_BAD_PARAM = 2000,
    CUDNN_STATUS_BAD_PARAM_NULL_POINTER = 2002,
    CUDNN_STATUS_BAD_PARAM_MISALIGNED_POINTER = 2003,
    CUDNN_STATUS_BAD_PARAM_NOT_FINALIZED = 2004,
    CUDNN_STATUS_BAD_PARAM_OUT_OF_BOUND = 2005,
    CUDNN_STATUS_BAD_PARAM_SIZE_INSUFFICIENT = 2006,
    CUDNN_STATUS_BAD_PARAM_STREAM_MISMATCH = 2007,
    CUDNN_STATUS_BAD_PARAM_SHAPE_MISMATCH = 2008,
    CUDNN_STATUS_BAD_PARAM_DUPLICATED_ENTRIES = 2009,
    CUDNN_STATUS_BAD_PARAM_ATTRIBUTE_TYPE = 2010,
    CUDNN_STATUS_NOT_SUPPORTED = 3000,
    CUDNN_STATUS_NOT_SUPPORTED_GRAPH_PATTERN = 3001,
    CUDNN_STATUS_NOT_SUPPORTED_SHAPE = 3002,
    CUDNN_STATUS_NOT_SUPPORTED_DATA_TYPE = 3003,
    CUDNN_STATUS_NOT_SUPPORTED_LAYOUT = 3004,
    CUDNN_STATUS_NOT_SUPPORTED_INCOMPATIBLE_CUDA_DRIVER = 3005,
    CUDNN_STATUS_NOT_SUPPORTED_INCOMPATIBLE_CUDART = 3006,
    CUDNN_STATUS_NOT_SUPPORTED_ARCH_MISMATCH = 3007,
    CUDNN_STATUS_NOT_SUPPORTED_RUNTIME_PREREQUISITE_MISSING = 3008,
    CUDNN_STATUS_NOT_SUPPORTED_SUBLIBRARY_UNAVAILABLE = 3009,
    CUDNN_STATUS_NOT_SUPPORTED_SHARED_MEMORY_INSUFFICIENT = 3010,
    CUDNN_STATUS_NOT_SUPPORTED_PADDING = 3011,
    CUDNN_STATUS_NOT_SUPPORTED_BAD_LAUNCH_PARAM = 3012,
    CUDNN_STATUS_INTERNAL_ERROR = 4000,
    CUDNN_STATUS_INTERNAL_ERROR_COMPILATION_FAILED = 4001,
    CUDNN_STATUS_INTERNAL_ERROR_UNEXPECTED_VALUE = 4002,
    CUDNN_STATUS_INTERNAL_ERROR_HOST_ALLOCATION_FAILED = 4003,
    CUDNN_STATUS_INTERNAL_ERROR_DEVICE_ALLOCATION_FAILED = 4004,
    CUDNN_STATUS_INTERNAL_ERROR_BAD_LAUNCH_PARAM = 4005,
    CUDNN_STATUS_INTERNAL_ERROR_TEXTURE_CREATION_FAILED = 4006,
    CUDNN_STATUS_EXECUTION_FAILED = 5000,
    CUDNN_STATUS_EXECUTION_FAILED_CUDA_DRIVER = 5001,
    CUDNN_STATUS_EXECUTION_FAILED_CUBLAS = 5002,
    CUDNN_STATUS_EXECUTION_FAILED_CUDART = 5003,
    CUDNN_STATUS_EXECUTION_FAILED_CURAND = 5004,
    CUDNN_STATUS_INVALID_VALUE = 2001,
}

public enum cudnnErrQueryMode_t : int
{
    CUDNN_ERRQUERY_RAWCODE = 0,
    CUDNN_ERRQUERY_NONBLOCKING = 1,
    CUDNN_ERRQUERY_BLOCKING = 2,
}

public enum cudnnDataType_t : int
{
    CUDNN_DATA_FLOAT = 0,
    CUDNN_DATA_DOUBLE = 1,
    CUDNN_DATA_HALF = 2,
    CUDNN_DATA_INT8 = 3,
    CUDNN_DATA_INT32 = 4,
    CUDNN_DATA_INT8x4 = 5,
    CUDNN_DATA_UINT8 = 6,
    CUDNN_DATA_UINT8x4 = 7,
    CUDNN_DATA_INT8x32 = 8,
    CUDNN_DATA_BFLOAT16 = 9,
    CUDNN_DATA_INT64 = 10,
    CUDNN_DATA_BOOLEAN = 11,
    CUDNN_DATA_FP8_E4M3 = 12,
    CUDNN_DATA_FP8_E5M2 = 13,
    CUDNN_DATA_FAST_FLOAT_FOR_FP8 = 14,
}

public enum cudnnMathType_t : int
{
    CUDNN_DEFAULT_MATH = 0,
    CUDNN_TENSOR_OP_MATH = 1,
    CUDNN_TENSOR_OP_MATH_ALLOW_CONVERSION = 2,
    CUDNN_FMA_MATH = 3,
}

public enum cudnnNanPropagation_t : int
{
    CUDNN_NOT_PROPAGATE_NAN = 0,
    CUDNN_PROPAGATE_NAN = 1,
}

public enum cudnnCTCGradMode_t : int
{
    CUDNN_CTC_ZERO_OOB_GRADIENTS = 0,
    CUDNN_CTC_SKIP_OOB_GRADIENTS = 1,
}

public enum cudnnTensorFormat_t : int
{
    CUDNN_TENSOR_NCHW = 0,
    CUDNN_TENSOR_NHWC = 1,
    CUDNN_TENSOR_NCHW_VECT_C = 2,
}

public enum cudnnReduceTensorOp_t : int
{
    CUDNN_REDUCE_TENSOR_ADD = 0,
    CUDNN_REDUCE_TENSOR_MUL = 1,
    CUDNN_REDUCE_TENSOR_MIN = 2,
    CUDNN_REDUCE_TENSOR_MAX = 3,
    CUDNN_REDUCE_TENSOR_AMAX = 4,
    CUDNN_REDUCE_TENSOR_AVG = 5,
    CUDNN_REDUCE_TENSOR_NORM1 = 6,
    CUDNN_REDUCE_TENSOR_NORM2 = 7,
    CUDNN_REDUCE_TENSOR_MUL_NO_ZEROS = 8,
}

public enum cudnnActivationMode_t : int
{
    CUDNN_ACTIVATION_SIGMOID = 0,
    CUDNN_ACTIVATION_RELU = 1,
    CUDNN_ACTIVATION_TANH = 2,
    CUDNN_ACTIVATION_CLIPPED_RELU = 3,
    CUDNN_ACTIVATION_ELU = 4,
    CUDNN_ACTIVATION_IDENTITY = 5,
    CUDNN_ACTIVATION_SWISH = 6,
}

public enum cudnnSeverity_t : int
{
    CUDNN_SEV_FATAL = 0,
    CUDNN_SEV_ERROR = 1,
    CUDNN_SEV_WARNING = 2,
    CUDNN_SEV_INFO = 3,
}

public enum cudnnConvolutionMode_t : int
{
    CUDNN_CONVOLUTION = 0,
    CUDNN_CROSS_CORRELATION = 1,
}

public enum cudnnReorderType_t : int
{
    CUDNN_DEFAULT_REORDER = 0,
    CUDNN_NO_REORDER = 1,
}

public enum cudnnBackendAttributeName_t : int
{
    CUDNN_ATTR_POINTWISE_MODE = 0,
    CUDNN_ATTR_POINTWISE_MATH_PREC = 1,
    CUDNN_ATTR_POINTWISE_NAN_PROPAGATION = 2,
    CUDNN_ATTR_POINTWISE_RELU_LOWER_CLIP = 3,
    CUDNN_ATTR_POINTWISE_RELU_UPPER_CLIP = 4,
    CUDNN_ATTR_POINTWISE_RELU_LOWER_CLIP_SLOPE = 5,
    CUDNN_ATTR_POINTWISE_ELU_ALPHA = 6,
    CUDNN_ATTR_POINTWISE_SOFTPLUS_BETA = 7,
    CUDNN_ATTR_POINTWISE_SWISH_BETA = 8,
    CUDNN_ATTR_POINTWISE_AXIS = 9,
    CUDNN_ATTR_CONVOLUTION_COMP_TYPE = 100,
    CUDNN_ATTR_CONVOLUTION_CONV_MODE = 101,
    CUDNN_ATTR_CONVOLUTION_DILATIONS = 102,
    CUDNN_ATTR_CONVOLUTION_FILTER_STRIDES = 103,
    CUDNN_ATTR_CONVOLUTION_POST_PADDINGS = 104,
    CUDNN_ATTR_CONVOLUTION_PRE_PADDINGS = 105,
    CUDNN_ATTR_CONVOLUTION_SPATIAL_DIMS = 106,
    CUDNN_ATTR_ENGINEHEUR_MODE = 200,
    CUDNN_ATTR_ENGINEHEUR_OPERATION_GRAPH = 201,
    CUDNN_ATTR_ENGINEHEUR_RESULTS = 202,
    CUDNN_ATTR_ENGINEHEUR_SM_COUNT_TARGET = 203,
    CUDNN_ATTR_ENGINECFG_ENGINE = 300,
    CUDNN_ATTR_ENGINECFG_INTERMEDIATE_INFO = 301,
    CUDNN_ATTR_ENGINECFG_KNOB_CHOICES = 302,
    CUDNN_ATTR_ENGINECFG_WORKSPACE_SIZE = 303,
    CUDNN_ATTR_ENGINECFG_SHARED_MEMORY_USED = 304,
    CUDNN_ATTR_EXECUTION_PLAN_HANDLE = 400,
    CUDNN_ATTR_EXECUTION_PLAN_ENGINE_CONFIG = 401,
    CUDNN_ATTR_EXECUTION_PLAN_WORKSPACE_SIZE = 402,
    CUDNN_ATTR_EXECUTION_PLAN_COMPUTED_INTERMEDIATE_UIDS = 403,
    CUDNN_ATTR_EXECUTION_PLAN_RUN_ONLY_INTERMEDIATE_UIDS = 404,
    CUDNN_ATTR_EXECUTION_PLAN_JSON_REPRESENTATION = 405,
    CUDNN_ATTR_INTERMEDIATE_INFO_UNIQUE_ID = 500,
    CUDNN_ATTR_INTERMEDIATE_INFO_SIZE = 501,
    CUDNN_ATTR_INTERMEDIATE_INFO_DEPENDENT_DATA_UIDS = 502,
    CUDNN_ATTR_INTERMEDIATE_INFO_DEPENDENT_ATTRIBUTES = 503,
    CUDNN_ATTR_KNOB_CHOICE_KNOB_TYPE = 600,
    CUDNN_ATTR_KNOB_CHOICE_KNOB_VALUE = 601,
    CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_ALPHA = 700,
    CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_BETA = 701,
    CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_CONV_DESC = 702,
    CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_W = 703,
    CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_X = 704,
    CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_Y = 705,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_ALPHA = 706,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_BETA = 707,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_CONV_DESC = 708,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_W = 709,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_DX = 710,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_DY = 711,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_ALPHA = 712,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_BETA = 713,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_CONV_DESC = 714,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_DW = 715,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_X = 716,
    CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_DY = 717,
    CUDNN_ATTR_OPERATION_POINTWISE_PW_DESCRIPTOR = 750,
    CUDNN_ATTR_OPERATION_POINTWISE_XDESC = 751,
    CUDNN_ATTR_OPERATION_POINTWISE_BDESC = 752,
    CUDNN_ATTR_OPERATION_POINTWISE_YDESC = 753,
    CUDNN_ATTR_OPERATION_POINTWISE_ALPHA1 = 754,
    CUDNN_ATTR_OPERATION_POINTWISE_ALPHA2 = 755,
    CUDNN_ATTR_OPERATION_POINTWISE_DXDESC = 756,
    CUDNN_ATTR_OPERATION_POINTWISE_DYDESC = 757,
    CUDNN_ATTR_OPERATION_POINTWISE_TDESC = 758,
    CUDNN_ATTR_OPERATION_GENSTATS_MODE = 770,
    CUDNN_ATTR_OPERATION_GENSTATS_MATH_PREC = 771,
    CUDNN_ATTR_OPERATION_GENSTATS_XDESC = 772,
    CUDNN_ATTR_OPERATION_GENSTATS_SUMDESC = 773,
    CUDNN_ATTR_OPERATION_GENSTATS_SQSUMDESC = 774,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_STATS_MODE = 780,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_MATH_PREC = 781,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_Y_SUM_DESC = 782,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_Y_SQ_SUM_DESC = 783,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_SCALE_DESC = 784,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_BIAS_DESC = 785,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_PREV_RUNNING_MEAN_DESC = 786,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_PREV_RUNNING_VAR_DESC = 787,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_UPDATED_RUNNING_MEAN_DESC = 788,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_UPDATED_RUNNING_VAR_DESC = 789,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_SAVED_MEAN_DESC = 790,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_SAVED_INV_STD_DESC = 791,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_EQ_SCALE_DESC = 792,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_EQ_BIAS_DESC = 793,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_ACCUM_COUNT_DESC = 794,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_EPSILON_DESC = 795,
    CUDNN_ATTR_OPERATION_BN_FINALIZE_EXP_AVERATE_FACTOR_DESC = 796,
    CUDNN_ATTR_OPERATIONGRAPH_HANDLE = 800,
    CUDNN_ATTR_OPERATIONGRAPH_OPS = 801,
    CUDNN_ATTR_OPERATIONGRAPH_ENGINE_GLOBAL_COUNT = 802,
    CUDNN_ATTR_TENSOR_BYTE_ALIGNMENT = 900,
    CUDNN_ATTR_TENSOR_DATA_TYPE = 901,
    CUDNN_ATTR_TENSOR_DIMENSIONS = 902,
    CUDNN_ATTR_TENSOR_STRIDES = 903,
    CUDNN_ATTR_TENSOR_VECTOR_COUNT = 904,
    CUDNN_ATTR_TENSOR_VECTORIZED_DIMENSION = 905,
    CUDNN_ATTR_TENSOR_UNIQUE_ID = 906,
    CUDNN_ATTR_TENSOR_IS_VIRTUAL = 907,
    CUDNN_ATTR_TENSOR_IS_BY_VALUE = 908,
    CUDNN_ATTR_TENSOR_REORDERING_MODE = 909,
    CUDNN_ATTR_TENSOR_RAGGED_OFFSET_DESC = 913,
    CUDNN_ATTR_VARIANT_PACK_UNIQUE_IDS = 1000,
    CUDNN_ATTR_VARIANT_PACK_DATA_POINTERS = 1001,
    CUDNN_ATTR_VARIANT_PACK_INTERMEDIATES = 1002,
    CUDNN_ATTR_VARIANT_PACK_WORKSPACE = 1003,
    CUDNN_ATTR_LAYOUT_INFO_TENSOR_UID = 1100,
    CUDNN_ATTR_LAYOUT_INFO_TYPES = 1101,
    CUDNN_ATTR_KNOB_INFO_TYPE = 1200,
    CUDNN_ATTR_KNOB_INFO_MAXIMUM_VALUE = 1201,
    CUDNN_ATTR_KNOB_INFO_MINIMUM_VALUE = 1202,
    CUDNN_ATTR_KNOB_INFO_STRIDE = 1203,
    CUDNN_ATTR_ENGINE_OPERATION_GRAPH = 1300,
    CUDNN_ATTR_ENGINE_GLOBAL_INDEX = 1301,
    CUDNN_ATTR_ENGINE_KNOB_INFO = 1302,
    CUDNN_ATTR_ENGINE_NUMERICAL_NOTE = 1303,
    CUDNN_ATTR_ENGINE_LAYOUT_INFO = 1304,
    CUDNN_ATTR_ENGINE_BEHAVIOR_NOTE = 1305,
    CUDNN_ATTR_ENGINE_SM_COUNT_TARGET = 1306,
    CUDNN_ATTR_MATMUL_COMP_TYPE = 1500,
    CUDNN_ATTR_MATMUL_PADDING_VALUE = 1503,
    CUDNN_ATTR_OPERATION_MATMUL_ADESC = 1520,
    CUDNN_ATTR_OPERATION_MATMUL_BDESC = 1521,
    CUDNN_ATTR_OPERATION_MATMUL_CDESC = 1522,
    CUDNN_ATTR_OPERATION_MATMUL_DESC = 1523,
    CUDNN_ATTR_OPERATION_MATMUL_IRREGULARLY_STRIDED_BATCH_COUNT = 1524,
    CUDNN_ATTR_OPERATION_MATMUL_GEMM_M_OVERRIDE_DESC = 1525,
    CUDNN_ATTR_OPERATION_MATMUL_GEMM_N_OVERRIDE_DESC = 1526,
    CUDNN_ATTR_OPERATION_MATMUL_GEMM_K_OVERRIDE_DESC = 1527,
    CUDNN_ATTR_REDUCTION_OPERATOR = 1600,
    CUDNN_ATTR_REDUCTION_COMP_TYPE = 1601,
    CUDNN_ATTR_OPERATION_REDUCTION_XDESC = 1610,
    CUDNN_ATTR_OPERATION_REDUCTION_YDESC = 1611,
    CUDNN_ATTR_OPERATION_REDUCTION_DESC = 1612,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_MATH_PREC = 1620,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_MEAN_DESC = 1621,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_INVSTD_DESC = 1622,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_BN_SCALE_DESC = 1623,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_X_DESC = 1624,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_DY_DESC = 1625,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_DBN_SCALE_DESC = 1626,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_DBN_BIAS_DESC = 1627,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_EQ_DY_SCALE_DESC = 1628,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_EQ_X_SCALE_DESC = 1629,
    CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_EQ_BIAS = 1630,
    CUDNN_ATTR_RESAMPLE_MODE = 1700,
    CUDNN_ATTR_RESAMPLE_COMP_TYPE = 1701,
    CUDNN_ATTR_RESAMPLE_SPATIAL_DIMS = 1702,
    CUDNN_ATTR_RESAMPLE_POST_PADDINGS = 1703,
    CUDNN_ATTR_RESAMPLE_PRE_PADDINGS = 1704,
    CUDNN_ATTR_RESAMPLE_STRIDES = 1705,
    CUDNN_ATTR_RESAMPLE_WINDOW_DIMS = 1706,
    CUDNN_ATTR_RESAMPLE_NAN_PROPAGATION = 1707,
    CUDNN_ATTR_RESAMPLE_PADDING_MODE = 1708,
    CUDNN_ATTR_OPERATION_RESAMPLE_FWD_XDESC = 1710,
    CUDNN_ATTR_OPERATION_RESAMPLE_FWD_YDESC = 1711,
    CUDNN_ATTR_OPERATION_RESAMPLE_FWD_IDXDESC = 1712,
    CUDNN_ATTR_OPERATION_RESAMPLE_FWD_ALPHA = 1713,
    CUDNN_ATTR_OPERATION_RESAMPLE_FWD_BETA = 1714,
    CUDNN_ATTR_OPERATION_RESAMPLE_FWD_DESC = 1716,
    CUDNN_ATTR_OPERATION_RESAMPLE_BWD_DXDESC = 1720,
    CUDNN_ATTR_OPERATION_RESAMPLE_BWD_DYDESC = 1721,
    CUDNN_ATTR_OPERATION_RESAMPLE_BWD_IDXDESC = 1722,
    CUDNN_ATTR_OPERATION_RESAMPLE_BWD_ALPHA = 1723,
    CUDNN_ATTR_OPERATION_RESAMPLE_BWD_BETA = 1724,
    CUDNN_ATTR_OPERATION_RESAMPLE_BWD_DESC = 1725,
    CUDNN_ATTR_OPERATION_RESAMPLE_BWD_XDESC = 1726,
    CUDNN_ATTR_OPERATION_RESAMPLE_BWD_YDESC = 1727,
    CUDNN_ATTR_OPERATION_CONCAT_AXIS = 1800,
    CUDNN_ATTR_OPERATION_CONCAT_INPUT_DESCS = 1801,
    CUDNN_ATTR_OPERATION_CONCAT_INPLACE_INDEX = 1802,
    CUDNN_ATTR_OPERATION_CONCAT_OUTPUT_DESC = 1803,
    CUDNN_ATTR_OPERATION_SIGNAL_MODE = 1900,
    CUDNN_ATTR_OPERATION_SIGNAL_FLAGDESC = 1901,
    CUDNN_ATTR_OPERATION_SIGNAL_VALUE = 1902,
    CUDNN_ATTR_OPERATION_SIGNAL_XDESC = 1903,
    CUDNN_ATTR_OPERATION_SIGNAL_YDESC = 1904,
    CUDNN_ATTR_OPERATION_NORM_FWD_MODE = 2000,
    CUDNN_ATTR_OPERATION_NORM_FWD_PHASE = 2001,
    CUDNN_ATTR_OPERATION_NORM_FWD_XDESC = 2002,
    CUDNN_ATTR_OPERATION_NORM_FWD_MEAN_DESC = 2003,
    CUDNN_ATTR_OPERATION_NORM_FWD_INV_VARIANCE_DESC = 2004,
    CUDNN_ATTR_OPERATION_NORM_FWD_SCALE_DESC = 2005,
    CUDNN_ATTR_OPERATION_NORM_FWD_BIAS_DESC = 2006,
    CUDNN_ATTR_OPERATION_NORM_FWD_EPSILON_DESC = 2007,
    CUDNN_ATTR_OPERATION_NORM_FWD_EXP_AVG_FACTOR_DESC = 2008,
    CUDNN_ATTR_OPERATION_NORM_FWD_INPUT_RUNNING_MEAN_DESC = 2009,
    CUDNN_ATTR_OPERATION_NORM_FWD_INPUT_RUNNING_VAR_DESC = 2010,
    CUDNN_ATTR_OPERATION_NORM_FWD_OUTPUT_RUNNING_MEAN_DESC = 2011,
    CUDNN_ATTR_OPERATION_NORM_FWD_OUTPUT_RUNNING_VAR_DESC = 2012,
    CUDNN_ATTR_OPERATION_NORM_FWD_YDESC = 2013,
    CUDNN_ATTR_OPERATION_NORM_FWD_PEER_STAT_DESCS = 2014,
    CUDNN_ATTR_OPERATION_NORM_BWD_MODE = 2100,
    CUDNN_ATTR_OPERATION_NORM_BWD_XDESC = 2101,
    CUDNN_ATTR_OPERATION_NORM_BWD_MEAN_DESC = 2102,
    CUDNN_ATTR_OPERATION_NORM_BWD_INV_VARIANCE_DESC = 2103,
    CUDNN_ATTR_OPERATION_NORM_BWD_DYDESC = 2104,
    CUDNN_ATTR_OPERATION_NORM_BWD_SCALE_DESC = 2105,
    CUDNN_ATTR_OPERATION_NORM_BWD_EPSILON_DESC = 2106,
    CUDNN_ATTR_OPERATION_NORM_BWD_DSCALE_DESC = 2107,
    CUDNN_ATTR_OPERATION_NORM_BWD_DBIAS_DESC = 2108,
    CUDNN_ATTR_OPERATION_NORM_BWD_DXDESC = 2109,
    CUDNN_ATTR_OPERATION_NORM_BWD_PEER_STAT_DESCS = 2110,
    CUDNN_ATTR_OPERATION_RESHAPE_XDESC = 2200,
    CUDNN_ATTR_OPERATION_RESHAPE_YDESC = 2201,
    CUDNN_ATTR_RNG_DISTRIBUTION = 2300,
    CUDNN_ATTR_RNG_NORMAL_DIST_MEAN = 2301,
    CUDNN_ATTR_RNG_NORMAL_DIST_STANDARD_DEVIATION = 2302,
    CUDNN_ATTR_RNG_UNIFORM_DIST_MAXIMUM = 2303,
    CUDNN_ATTR_RNG_UNIFORM_DIST_MINIMUM = 2304,
    CUDNN_ATTR_RNG_BERNOULLI_DIST_PROBABILITY = 2305,
    CUDNN_ATTR_OPERATION_RNG_YDESC = 2310,
    CUDNN_ATTR_OPERATION_RNG_SEED = 2311,
    CUDNN_ATTR_OPERATION_RNG_DESC = 2312,
    CUDNN_ATTR_OPERATION_RNG_OFFSET_DESC = 2313,
}

public enum cudnnBackendAttributeType_t : int
{
    CUDNN_TYPE_HANDLE = 0,
    CUDNN_TYPE_DATA_TYPE = 1,
    CUDNN_TYPE_BOOLEAN = 2,
    CUDNN_TYPE_INT64 = 3,
    CUDNN_TYPE_FLOAT = 4,
    CUDNN_TYPE_DOUBLE = 5,
    CUDNN_TYPE_VOID_PTR = 6,
    CUDNN_TYPE_CONVOLUTION_MODE = 7,
    CUDNN_TYPE_HEUR_MODE = 8,
    CUDNN_TYPE_KNOB_TYPE = 9,
    CUDNN_TYPE_NAN_PROPOGATION = 10,
    CUDNN_TYPE_NUMERICAL_NOTE = 11,
    CUDNN_TYPE_LAYOUT_TYPE = 12,
    CUDNN_TYPE_ATTRIB_NAME = 13,
    CUDNN_TYPE_POINTWISE_MODE = 14,
    CUDNN_TYPE_BACKEND_DESCRIPTOR = 15,
    CUDNN_TYPE_GENSTATS_MODE = 16,
    CUDNN_TYPE_BN_FINALIZE_STATS_MODE = 17,
    CUDNN_TYPE_REDUCTION_OPERATOR_TYPE = 18,
    CUDNN_TYPE_BEHAVIOR_NOTE = 19,
    CUDNN_TYPE_TENSOR_REORDERING_MODE = 20,
    CUDNN_TYPE_RESAMPLE_MODE = 21,
    CUDNN_TYPE_PADDING_MODE = 22,
    CUDNN_TYPE_INT32 = 23,
    CUDNN_TYPE_CHAR = 24,
    CUDNN_TYPE_SIGNAL_MODE = 25,
    CUDNN_TYPE_FRACTION = 26,
    CUDNN_TYPE_NORM_MODE = 27,
    CUDNN_TYPE_NORM_FWD_PHASE = 28,
    CUDNN_TYPE_RNG_DISTRIBUTION = 29,
}

public enum cudnnBackendDescriptorType_t : int
{
    CUDNN_BACKEND_POINTWISE_DESCRIPTOR = 0,
    CUDNN_BACKEND_CONVOLUTION_DESCRIPTOR = 1,
    CUDNN_BACKEND_ENGINE_DESCRIPTOR = 2,
    CUDNN_BACKEND_ENGINECFG_DESCRIPTOR = 3,
    CUDNN_BACKEND_ENGINEHEUR_DESCRIPTOR = 4,
    CUDNN_BACKEND_EXECUTION_PLAN_DESCRIPTOR = 5,
    CUDNN_BACKEND_INTERMEDIATE_INFO_DESCRIPTOR = 6,
    CUDNN_BACKEND_KNOB_CHOICE_DESCRIPTOR = 7,
    CUDNN_BACKEND_KNOB_INFO_DESCRIPTOR = 8,
    CUDNN_BACKEND_LAYOUT_INFO_DESCRIPTOR = 9,
    CUDNN_BACKEND_OPERATION_CONVOLUTION_FORWARD_DESCRIPTOR = 10,
    CUDNN_BACKEND_OPERATION_CONVOLUTION_BACKWARD_FILTER_DESCRIPTOR = 11,
    CUDNN_BACKEND_OPERATION_CONVOLUTION_BACKWARD_DATA_DESCRIPTOR = 12,
    CUDNN_BACKEND_OPERATION_POINTWISE_DESCRIPTOR = 13,
    CUDNN_BACKEND_OPERATION_GEN_STATS_DESCRIPTOR = 14,
    CUDNN_BACKEND_OPERATIONGRAPH_DESCRIPTOR = 15,
    CUDNN_BACKEND_VARIANT_PACK_DESCRIPTOR = 16,
    CUDNN_BACKEND_TENSOR_DESCRIPTOR = 17,
    CUDNN_BACKEND_MATMUL_DESCRIPTOR = 18,
    CUDNN_BACKEND_OPERATION_MATMUL_DESCRIPTOR = 19,
    CUDNN_BACKEND_OPERATION_BN_FINALIZE_STATISTICS_DESCRIPTOR = 20,
    CUDNN_BACKEND_REDUCTION_DESCRIPTOR = 21,
    CUDNN_BACKEND_OPERATION_REDUCTION_DESCRIPTOR = 22,
    CUDNN_BACKEND_OPERATION_BN_BWD_WEIGHTS_DESCRIPTOR = 23,
    CUDNN_BACKEND_RESAMPLE_DESCRIPTOR = 24,
    CUDNN_BACKEND_OPERATION_RESAMPLE_FWD_DESCRIPTOR = 25,
    CUDNN_BACKEND_OPERATION_RESAMPLE_BWD_DESCRIPTOR = 26,
    CUDNN_BACKEND_OPERATION_CONCAT_DESCRIPTOR = 27,
    CUDNN_BACKEND_OPERATION_SIGNAL_DESCRIPTOR = 28,
    CUDNN_BACKEND_OPERATION_NORM_FORWARD_DESCRIPTOR = 29,
    CUDNN_BACKEND_OPERATION_NORM_BACKWARD_DESCRIPTOR = 30,
    CUDNN_BACKEND_OPERATION_RESHAPE_DESCRIPTOR = 31,
    CUDNN_BACKEND_RNG_DESCRIPTOR = 32,
    CUDNN_BACKEND_OPERATION_RNG_DESCRIPTOR = 33,
}

public enum cudnnDeterminism_t : int
{
    CUDNN_NON_DETERMINISTIC = 0,
    CUDNN_DETERMINISTIC = 1,
}

public enum cudnnFoldingDirection_t : int
{
    CUDNN_TRANSFORM_FOLD = 0,
    CUDNN_TRANSFORM_UNFOLD = 1,
}

public enum cudnnOpTensorOp_t : int
{
    CUDNN_OP_TENSOR_ADD = 0,
    CUDNN_OP_TENSOR_MUL = 1,
    CUDNN_OP_TENSOR_MIN = 2,
    CUDNN_OP_TENSOR_MAX = 3,
    CUDNN_OP_TENSOR_SQRT = 4,
    CUDNN_OP_TENSOR_NOT = 5,
}

public enum cudnnReduceTensorIndices_t : int
{
    CUDNN_REDUCE_TENSOR_NO_INDICES = 0,
    CUDNN_REDUCE_TENSOR_FLATTENED_INDICES = 1,
}

public enum cudnnIndicesType_t : int
{
    CUDNN_32BIT_INDICES = 0,
    CUDNN_64BIT_INDICES = 1,
    CUDNN_16BIT_INDICES = 2,
    CUDNN_8BIT_INDICES = 3,
}

public enum cudnnSoftmaxAlgorithm_t : int
{
    CUDNN_SOFTMAX_FAST = 0,
    CUDNN_SOFTMAX_ACCURATE = 1,
    CUDNN_SOFTMAX_LOG = 2,
}

public enum cudnnSoftmaxMode_t : int
{
    CUDNN_SOFTMAX_MODE_INSTANCE = 0,
    CUDNN_SOFTMAX_MODE_CHANNEL = 1,
}

public enum cudnnPoolingMode_t : int
{
    CUDNN_POOLING_MAX = 0,
    CUDNN_POOLING_AVERAGE_COUNT_INCLUDE_PADDING = 1,
    CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING = 2,
    CUDNN_POOLING_MAX_DETERMINISTIC = 3,
}

public enum cudnnLRNMode_t : int
{
    CUDNN_LRN_CROSS_CHANNEL_DIM1 = 0,
}

public enum cudnnDivNormMode_t : int
{
    CUDNN_DIVNORM_PRECOMPUTED_MEANS = 0,
}

public enum cudnnBatchNormMode_t : int
{
    CUDNN_BATCHNORM_PER_ACTIVATION = 0,
    CUDNN_BATCHNORM_SPATIAL = 1,
    CUDNN_BATCHNORM_SPATIAL_PERSISTENT = 2,
}

public enum cudnnBatchNormOps_t : int
{
    CUDNN_BATCHNORM_OPS_BN = 0,
    CUDNN_BATCHNORM_OPS_BN_ACTIVATION = 1,
    CUDNN_BATCHNORM_OPS_BN_ADD_ACTIVATION = 2,
}

public enum cudnnNormMode_t : int
{
    CUDNN_NORM_PER_ACTIVATION = 0,
    CUDNN_NORM_PER_CHANNEL = 1,
}

public enum cudnnNormAlgo_t : int
{
    CUDNN_NORM_ALGO_STANDARD = 0,
    CUDNN_NORM_ALGO_PERSIST = 1,
}

public enum cudnnNormOps_t : int
{
    CUDNN_NORM_OPS_NORM = 0,
    CUDNN_NORM_OPS_NORM_ACTIVATION = 1,
    CUDNN_NORM_OPS_NORM_ADD_ACTIVATION = 2,
}

public enum cudnnSamplerType_t : int
{
    CUDNN_SAMPLER_BILINEAR = 0,
}

public enum cudnnConvolutionFwdAlgo_t : int
{
    CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_GEMM = 0,
    CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMP_GEMM = 1,
    CUDNN_CONVOLUTION_FWD_ALGO_GEMM = 2,
    CUDNN_CONVOLUTION_FWD_ALGO_DIRECT = 3,
    CUDNN_CONVOLUTION_FWD_ALGO_FFT = 4,
    CUDNN_CONVOLUTION_FWD_ALGO_FFT_TILING = 5,
    CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD = 6,
    CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD_NONFUSED = 7,
    CUDNN_CONVOLUTION_FWD_ALGO_COUNT = 8,
}

public enum cudnnConvolutionBwdFilterAlgo_t : int
{
    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0 = 0,
    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_1 = 1,
    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT = 2,
    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_3 = 3,
    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD = 4,
    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD_NONFUSED = 5,
    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT_TILING = 6,
    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_COUNT = 7,
}

public enum cudnnConvolutionBwdDataAlgo_t : int
{
    CUDNN_CONVOLUTION_BWD_DATA_ALGO_0 = 0,
    CUDNN_CONVOLUTION_BWD_DATA_ALGO_1 = 1,
    CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT = 2,
    CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT_TILING = 3,
    CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD = 4,
    CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD_NONFUSED = 5,
    CUDNN_CONVOLUTION_BWD_DATA_ALGO_COUNT = 6,
}

public enum cudnnCTCLossAlgo_t : int
{
    CUDNN_CTC_LOSS_ALGO_DETERMINISTIC = 0,
    CUDNN_CTC_LOSS_ALGO_NON_DETERMINISTIC = 1,
}

public enum cudnnRNNAlgo_t : int
{
    CUDNN_RNN_ALGO_STANDARD = 0,
    CUDNN_RNN_ALGO_PERSIST_STATIC = 1,
    CUDNN_RNN_ALGO_PERSIST_DYNAMIC = 2,
    CUDNN_RNN_ALGO_PERSIST_STATIC_SMALL_H = 3,
    CUDNN_RNN_ALGO_COUNT = 4,
}

public enum cudnnForwardMode_t : int
{
    CUDNN_FWD_MODE_INFERENCE = 0,
    CUDNN_FWD_MODE_TRAINING = 1,
}

public enum cudnnRNNMode_t : int
{
    CUDNN_RNN_RELU = 0,
    CUDNN_RNN_TANH = 1,
    CUDNN_LSTM = 2,
    CUDNN_GRU = 3,
}

public enum cudnnRNNBiasMode_t : int
{
    CUDNN_RNN_NO_BIAS = 0,
    CUDNN_RNN_SINGLE_INP_BIAS = 1,
    CUDNN_RNN_DOUBLE_BIAS = 2,
    CUDNN_RNN_SINGLE_REC_BIAS = 3,
}

public enum cudnnDirectionMode_t : int
{
    CUDNN_UNIDIRECTIONAL = 0,
    CUDNN_BIDIRECTIONAL = 1,
}

public enum cudnnRNNInputMode_t : int
{
    CUDNN_LINEAR_INPUT = 0,
    CUDNN_SKIP_INPUT = 1,
}

public enum cudnnRNNClipMode_t : int
{
    CUDNN_RNN_CLIP_NONE = 0,
    CUDNN_RNN_CLIP_MINMAX = 1,
}

public enum cudnnRNNDataLayout_t : int
{
    CUDNN_RNN_DATA_LAYOUT_SEQ_MAJOR_UNPACKED = 0,
    CUDNN_RNN_DATA_LAYOUT_SEQ_MAJOR_PACKED = 1,
    CUDNN_RNN_DATA_LAYOUT_BATCH_MAJOR_UNPACKED = 2,
}

public enum cudnnSeqDataAxis_t : int
{
    CUDNN_SEQDATA_TIME_DIM = 0,
    CUDNN_SEQDATA_BATCH_DIM = 1,
    CUDNN_SEQDATA_BEAM_DIM = 2,
    CUDNN_SEQDATA_VECT_DIM = 3,
}

public enum cudnnMultiHeadAttnWeightKind_t : int
{
    CUDNN_MH_ATTN_Q_WEIGHTS = 0,
    CUDNN_MH_ATTN_K_WEIGHTS = 1,
    CUDNN_MH_ATTN_V_WEIGHTS = 2,
    CUDNN_MH_ATTN_O_WEIGHTS = 3,
    CUDNN_MH_ATTN_Q_BIASES = 4,
    CUDNN_MH_ATTN_K_BIASES = 5,
    CUDNN_MH_ATTN_V_BIASES = 6,
    CUDNN_MH_ATTN_O_BIASES = 7,
}

public enum cudnnWgradMode_t : int
{
    CUDNN_WGRAD_MODE_ADD = 0,
    CUDNN_WGRAD_MODE_SET = 1,
}

public enum cudnnLossNormalizationMode_t : int
{
    CUDNN_LOSS_NORMALIZATION_NONE = 0,
    CUDNN_LOSS_NORMALIZATION_SOFTMAX = 1,
}

public enum cudnnFusedOps_t : int
{
    CUDNN_FUSED_SCALE_BIAS_ACTIVATION_CONV_BNSTATS = 0,
    CUDNN_FUSED_SCALE_BIAS_ACTIVATION_WGRAD = 1,
    CUDNN_FUSED_BN_FINALIZE_STATISTICS_TRAINING = 2,
    CUDNN_FUSED_BN_FINALIZE_STATISTICS_INFERENCE = 3,
    CUDNN_FUSED_CONV_SCALE_BIAS_ADD_ACTIVATION = 4,
    CUDNN_FUSED_SCALE_BIAS_ADD_ACTIVATION_GEN_BITMASK = 5,
    CUDNN_FUSED_DACTIVATION_FORK_DBATCHNORM = 6,
}

public enum cudnnFusedOpsConstParamLabel_t : int
{
    CUDNN_PARAM_XDESC = 0,
    CUDNN_PARAM_XDATA_PLACEHOLDER = 1,
    CUDNN_PARAM_BN_MODE = 2,
    CUDNN_PARAM_BN_EQSCALEBIAS_DESC = 3,
    CUDNN_PARAM_BN_EQSCALE_PLACEHOLDER = 4,
    CUDNN_PARAM_BN_EQBIAS_PLACEHOLDER = 5,
    CUDNN_PARAM_ACTIVATION_DESC = 6,
    CUDNN_PARAM_CONV_DESC = 7,
    CUDNN_PARAM_WDESC = 8,
    CUDNN_PARAM_WDATA_PLACEHOLDER = 9,
    CUDNN_PARAM_DWDESC = 10,
    CUDNN_PARAM_DWDATA_PLACEHOLDER = 11,
    CUDNN_PARAM_YDESC = 12,
    CUDNN_PARAM_YDATA_PLACEHOLDER = 13,
    CUDNN_PARAM_DYDESC = 14,
    CUDNN_PARAM_DYDATA_PLACEHOLDER = 15,
    CUDNN_PARAM_YSTATS_DESC = 16,
    CUDNN_PARAM_YSUM_PLACEHOLDER = 17,
    CUDNN_PARAM_YSQSUM_PLACEHOLDER = 18,
    CUDNN_PARAM_BN_SCALEBIAS_MEANVAR_DESC = 19,
    CUDNN_PARAM_BN_SCALE_PLACEHOLDER = 20,
    CUDNN_PARAM_BN_BIAS_PLACEHOLDER = 21,
    CUDNN_PARAM_BN_SAVED_MEAN_PLACEHOLDER = 22,
    CUDNN_PARAM_BN_SAVED_INVSTD_PLACEHOLDER = 23,
    CUDNN_PARAM_BN_RUNNING_MEAN_PLACEHOLDER = 24,
    CUDNN_PARAM_BN_RUNNING_VAR_PLACEHOLDER = 25,
    CUDNN_PARAM_ZDESC = 26,
    CUDNN_PARAM_ZDATA_PLACEHOLDER = 27,
    CUDNN_PARAM_BN_Z_EQSCALEBIAS_DESC = 28,
    CUDNN_PARAM_BN_Z_EQSCALE_PLACEHOLDER = 29,
    CUDNN_PARAM_BN_Z_EQBIAS_PLACEHOLDER = 30,
    CUDNN_PARAM_ACTIVATION_BITMASK_DESC = 31,
    CUDNN_PARAM_ACTIVATION_BITMASK_PLACEHOLDER = 32,
    CUDNN_PARAM_DXDESC = 33,
    CUDNN_PARAM_DXDATA_PLACEHOLDER = 34,
    CUDNN_PARAM_DZDESC = 35,
    CUDNN_PARAM_DZDATA_PLACEHOLDER = 36,
    CUDNN_PARAM_BN_DSCALE_PLACEHOLDER = 37,
    CUDNN_PARAM_BN_DBIAS_PLACEHOLDER = 38,
}

public enum cudnnFusedOpsVariantParamLabel_t : int
{
    CUDNN_PTR_XDATA = 0,
    CUDNN_PTR_BN_EQSCALE = 1,
    CUDNN_PTR_BN_EQBIAS = 2,
    CUDNN_PTR_WDATA = 3,
    CUDNN_PTR_DWDATA = 4,
    CUDNN_PTR_YDATA = 5,
    CUDNN_PTR_DYDATA = 6,
    CUDNN_PTR_YSUM = 7,
    CUDNN_PTR_YSQSUM = 8,
    CUDNN_PTR_WORKSPACE = 9,
    CUDNN_PTR_BN_SCALE = 10,
    CUDNN_PTR_BN_BIAS = 11,
    CUDNN_PTR_BN_SAVED_MEAN = 12,
    CUDNN_PTR_BN_SAVED_INVSTD = 13,
    CUDNN_PTR_BN_RUNNING_MEAN = 14,
    CUDNN_PTR_BN_RUNNING_VAR = 15,
    CUDNN_PTR_ZDATA = 16,
    CUDNN_PTR_BN_Z_EQSCALE = 17,
    CUDNN_PTR_BN_Z_EQBIAS = 18,
    CUDNN_PTR_ACTIVATION_BITMASK = 19,
    CUDNN_PTR_DXDATA = 20,
    CUDNN_PTR_DZDATA = 21,
    CUDNN_PTR_BN_DSCALE = 22,
    CUDNN_PTR_BN_DBIAS = 23,
    CUDNN_SCALAR_SIZE_T_WORKSPACE_SIZE_IN_BYTES = 100,
    CUDNN_SCALAR_INT64_T_BN_ACCUMULATION_COUNT = 101,
    CUDNN_SCALAR_DOUBLE_BN_EXP_AVG_FACTOR = 102,
    CUDNN_SCALAR_DOUBLE_BN_EPSILON = 103,
}

public enum cudnnPointwiseMode_t
{
    CUDNN_POINTWISE_ADD        = 0,
    CUDNN_POINTWISE_ADD_SQUARE = 5,
    CUDNN_POINTWISE_DIV        = 6,
    CUDNN_POINTWISE_MAX        = 3,
    CUDNN_POINTWISE_MIN        = 2,
    CUDNN_POINTWISE_MOD        = 7,
    CUDNN_POINTWISE_MUL        = 1,
    CUDNN_POINTWISE_POW        = 8,
    CUDNN_POINTWISE_SUB        = 9,

    CUDNN_POINTWISE_ABS        = 10,
    CUDNN_POINTWISE_CEIL       = 11,
    CUDNN_POINTWISE_COS        = 12,
    CUDNN_POINTWISE_EXP        = 13,
    CUDNN_POINTWISE_FLOOR      = 14,
    CUDNN_POINTWISE_LOG        = 15,
    CUDNN_POINTWISE_NEG        = 16,
    CUDNN_POINTWISE_RSQRT      = 17,
    CUDNN_POINTWISE_SIN        = 18,
    CUDNN_POINTWISE_SQRT       = 4,
    CUDNN_POINTWISE_TAN        = 19,
    CUDNN_POINTWISE_ERF        = 20,
    CUDNN_POINTWISE_IDENTITY   = 21,
    CUDNN_POINTWISE_RECIPROCAL = 22,
    CUDNN_POINTWISE_ATAN2      = 23,

    CUDNN_POINTWISE_RELU_FWD             = 100,
    CUDNN_POINTWISE_TANH_FWD             = 101,
    CUDNN_POINTWISE_SIGMOID_FWD          = 102,
    CUDNN_POINTWISE_ELU_FWD              = 103,
    CUDNN_POINTWISE_GELU_FWD             = 104,
    CUDNN_POINTWISE_SOFTPLUS_FWD         = 105,
    CUDNN_POINTWISE_SWISH_FWD            = 106,
    CUDNN_POINTWISE_GELU_APPROX_TANH_FWD = 107,

    CUDNN_POINTWISE_RELU_BWD             = 200,
    CUDNN_POINTWISE_TANH_BWD             = 201,
    CUDNN_POINTWISE_SIGMOID_BWD          = 202,
    CUDNN_POINTWISE_ELU_BWD              = 203,
    CUDNN_POINTWISE_GELU_BWD             = 204,
    CUDNN_POINTWISE_SOFTPLUS_BWD         = 205,
    CUDNN_POINTWISE_SWISH_BWD            = 206,
    CUDNN_POINTWISE_GELU_APPROX_TANH_BWD = 207,

    CUDNN_POINTWISE_CMP_EQ  = 300,
    CUDNN_POINTWISE_CMP_NEQ = 301,
    CUDNN_POINTWISE_CMP_GT  = 302,
    CUDNN_POINTWISE_CMP_GE  = 303,
    CUDNN_POINTWISE_CMP_LT  = 304,
    CUDNN_POINTWISE_CMP_LE  = 305,

    CUDNN_POINTWISE_LOGICAL_AND = 400,
    CUDNN_POINTWISE_LOGICAL_OR  = 401,
    CUDNN_POINTWISE_LOGICAL_NOT = 402,

    CUDNN_POINTWISE_GEN_INDEX = 501,

    CUDNN_POINTWISE_BINARY_SELECT = 601,
}